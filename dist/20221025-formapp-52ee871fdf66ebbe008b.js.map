{"version":3,"file":"20221025-formapp-52ee871fdf66ebbe008b.js","mappings":"uQAKA,MAAMA,EAAcC,OAAOC,SAASC,SAASC,QAAQC,UAAUC,KAE/DL,OAAOC,SAASC,SAASC,QAAQC,UAAUC,KAAO,WAChD,GAAIC,KAAKC,QAAQC,KAAM,CACrB,MAAMA,GAAOC,EAAAA,EAAAA,IAAO,CAAC,EAAGH,KAAKC,QAAQC,MACrCF,KAAKI,YAAc,CAAEF,QACrBF,KAAKK,MAAQH,CACd,CACDT,EAAYa,KAAKN,KAClB,EAID,MAAMO,EAAYb,OAAOc,UAAUD,UACnCb,OAAOc,UAAUD,UAAY,SAASE,GACpC,IAAI,2BADyCC,EACzC,iCADyCA,EACzC,kBACF,OAAOH,EAAUE,KAASC,EAI3B,CAHC,MAAOC,GAEPC,QAAQC,MAAMF,EACf,CACF,EAGD,MAAMG,EAAWpB,OAAOc,UAAUM,SAsBlC,SAASC,EAAcC,EAAUC,EAAgBC,EAAUC,GACzD,OAAOzB,OAAO0B,WAAWC,SAASC,cAAc,OAAQ,CAAC,EAAG,CAAEH,gBAAeI,MAAKC,IAChF,MAAMC,GAAaC,EAAAA,EAAAA,IAAOR,GAAU,CAACS,EAAMC,IAClCC,YAAYf,SAASc,EAASJ,EAAKL,YAAY,CAAEF,eAAgBU,EAAMX,eAAgBW,GAC7FV,GAIH,OAFAO,EAAKM,UAEEL,CAAP,GAEH,CA/BD/B,OAAOc,UAAUM,SAAW,SAASL,GACnC,IAAI,2BADwCC,EACxC,iCADwCA,EACxC,kBACF,OAAOI,EAASL,KAASC,EAI1B,CAHC,MAAOC,GAEPC,QAAQC,MAAMF,EACf,CACF,ECnCD,MAAMoB,EAAkBrC,OAAOsC,WAAWC,WAAWC,OAC/CC,EAAkBzC,OAAOsC,WAAWC,WAAWG,OAGrD,MAAMC,UAAwB3C,OAAOsC,WAAWC,WAAWK,OACrDC,iBACF,MAAO,EACR,EAGH7C,OAAOsC,WAAWC,WAAWK,OAASD,EAqBtC,MAAMG,UAA2BL,EAClB,gBAAY,2BAARhC,EAAQ,yBAARA,EAAQ,gBACvB,OAAOgC,EAAgBM,OAAO,CAC5BC,MAAO,YACPC,IAAK,YACLC,KAAM,YACNC,QAAS,SACTC,aAAa,EACbC,cAAe,CACbC,cAAe,kDAEb7C,EACP,CAEG8C,oBACF,OAAOT,EAAmBC,QAC3B,CAEDS,cACEC,SAAS,WACTnD,KAAKoD,mBAAoBC,EAAAA,EAAAA,IAASrD,KAAKoD,kBAAmB,IAC3D,CAEDE,YAAYC,EAAaC,GAClBxD,KAAKyD,QAKVzD,KAAKoD,kBAAkBI,EAAaD,GAJlCvD,KAAK0D,oBAKR,CAGDC,eAAeJ,GACb,OAAKA,GAAeA,EAAYK,OAAS,EAAUC,QAAQC,QAAQ,IAE5D9D,KAAKc,SAASd,KAAK+D,UAAU7D,KAAK8D,OAAQ,CAC/CC,OAAQ,GACRV,eACC,SACJ,CAEDH,kBAAkBI,EAAaD,GACxBC,GAAgBxD,KAAKkE,QAK1BlE,KAAKmE,SAAU,EACfnE,KAAK2D,eAAeJ,GACjBhC,MAAK6C,IACJpE,KAAKmE,SAAU,EACfnE,KAAKqE,SAASD,GAAS,GAAvB,IAEDE,OAAMC,IACLvE,KAAKwE,mBAAmBD,EAAxB,KAXFvE,KAAK0D,oBAaR,ECxDH,IAAIe,EAcAC,EAZJ,SAASC,IACPC,OAAOC,SAAS,CAAEC,IAAK,GACxB,CAED,SAASC,EAAaC,EAAeC,GACnC,OAAOR,EAAOS,QAAQ,kBAAmB,CAAEF,gBAAeC,SAC3D,CAED,SAASE,EAAWC,GAClB,OFNF,SAA0BA,EAAgBC,GACxC,OAAO3F,OAAO0B,WAAWC,SAASC,cAAc,OAAQ,CAAC,GAAGC,MAAKC,IAC/D,MAAM8D,GAAU5D,EAAAA,EAAAA,IAAO0D,GAAgB,CAACzD,EAAM4D,KACrCpF,EAAAA,EAAAA,IAAO,CAAC,EAAGwB,EAAME,YAAYf,SAASyE,EAAQ/D,EAAKL,YAAYQ,MACrE0D,GAIH,OAFA7D,EAAKM,UAEEwD,CAAP,GAEH,CEJQE,CAAiBJ,EAAgB,CAAEL,eAAcU,WAAhB,IAA4BC,UAAW,CAAC,EAAGC,iBAAgBA,EAAAA,GACpG,CD+CDjG,OAAOkG,IAAI,CACT3D,WAAY,CACV4D,QAjFJ,cAA+B9D,EAC7BmB,cACEC,SAAS,WACTnD,KAAK8F,SAAU,CAChB,CACY,gBAAgB,2BAAZC,EAAY,yBAAZA,EAAY,gBAC3B,OAAOhE,EAAgBU,OAAO,CAC5BC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNX,WAAY,GACZ+D,OAAO,EACPC,YAAY,EACZJ,QAAS,SACLE,EACP,GAmECG,UAAW1D,KC9Cf,MAAM2D,EAAW,SAAS3E,EAAM4E,GAC9B,MAAMlG,EFcR,SAA2BsB,EAAM4E,EAAgBC,EAAe3B,GAC9D,OAAOhD,EAAAA,EAAAA,IAAO0E,GAAgB,CAACzE,EAAMC,KACnC,MAAM0D,EAAU9D,EAAKL,YAAY,CAAEF,eAAgBU,EAAM+C,mBAEzD,OADAY,EAAQgB,WAAazE,YAAYf,SALV,iHAKuCwE,GACvDzD,YAAYf,SAASc,EAAS0D,IAAY3D,CAAjD,GACC0E,EACJ,CEpBcE,CAAkB/E,EAAM4E,EAAgBI,gBAAgBhF,EAAKC,WAAWvB,MAAOwE,GAE5FlD,EAAKtB,KAAOA,EACZsB,EAAKiF,cAAc,CAAEvG,QAAQ,CAAEwG,oBAAoB,EAAMC,gBAAgB,IAEzEjC,EAAiB8B,gBAAgBhF,EAAKC,WAAWvB,KAClD,EAEK0G,GAAmBvD,EAAAA,EAAAA,IAAS8C,EAAU,KAEtCU,GAAkBxD,EAAAA,EAAAA,KAAS,SAAS5B,GACxCgD,EAAOS,QAAQ,0BAA2BzD,EAC3C,GAAE,KAEHqF,eAAeC,EAAf,GAA8I,IAApH,WAAEC,EAAF,iBAAcC,EAAd,SAAgCjG,EAAhC,eAA0CC,EAA1C,SAA0DC,EAA1D,eAAoEkF,EAApE,eAAoFhB,EAApF,aAAoG8B,GAAgB,EAC5I,MAAM/F,QAAoBgE,EAAWC,GAE/B3D,EAAawF,SAA0BlG,EAAcC,EAAUC,EAAgBC,EAAUC,GAC/FuD,EAAiB8B,gBAAgB/E,GAEjC,MAAMD,QAAa9B,OAAO0B,WAAWC,SAAS8F,eAAe,QAASH,EAAY,CAChF7F,cACAjB,KAAMuB,EACN0E,SAAS,EAAD,GAAuC,IAAtC,mBAAEO,GAAoC,GAAd,SAAEU,GAAY,EACzCV,GAAsBlF,EAAK6F,aAG3BD,GAAYA,EAASE,aAEzBT,EAAgBrF,EAAKC,WAAWvB,MAEhC0G,EAAiBpF,EAAM4E,GACxB,IAGH5E,EAAK+F,UAAW,EAEhB9C,EAAO+C,IAAI,eACX/C,EAAO+C,IAAI,eAEX/C,EAAOgD,GAAG,CACR,cAAcC,GAEZlG,EAAKmG,YAAWC,EAAAA,EAAAA,IAAIF,GAAQ7G,IACnB,CAAEgH,QAAShH,OAChB,EACL,EACD,gBACEW,EAAKsG,QACN,IAGHtG,EAAKiG,GAAG,WAAY9C,GACpBnD,EAAKiG,GAAG,WAAY9C,GAEpBnD,EAAKiG,GAAG,SAAS,KACfhD,EAAOS,QAAQ,aAAf,IAGF1D,EAAKiG,GAAG,UAAUM,IAKhB,GAHAnB,EAAiBoB,SACjB7B,EAAS3E,EAAM4E,GACf5E,EAAKyG,aAAY,IACZzG,EAAK0G,cAAcH,EAAS7H,MAAM,EAAM6H,EAAS7H,MAEpD,YADAsB,EAAK2G,KAAK,SAIZ,MAAMjI,EAAO2B,YAAYf,SAASoG,EAAc1F,EAAKL,YAAY,CAAEF,eAAgB8G,EAAS7H,SAAY,CAAC,EAEzGuE,EAAOS,QAAQ,cAAe,CAAE6C,UAAU5H,EAAAA,EAAAA,IAAO,CAAC,EAAG4H,EAAU,CAAE7H,UAAjE,IAGFuE,EAAOS,QAAQ,aAChB,CAED4B,eAAesB,EAAf,GAA6D,IAAhC,WAAEpB,EAAF,eAAc5B,GAAkB,EAC3D,MAAMjE,QAAoBgE,EAAWC,IAErCjF,EAAAA,EAAAA,IAAOgB,EAAa,CAAEkH,WAAW,IAEjC3I,OAAO0B,WAAWC,SAAS8F,eAAe,QAASH,EAAY,CAAE7F,eAClE,CAED2F,eAAewB,EAAf,GAA8E,IAAhD,WAAEtB,EAAF,eAAc/F,EAAd,eAA8BmE,GAAkB,EAC5E,MAAMjE,QAAoBgE,EAAWC,IAErCjF,EAAAA,EAAAA,IAAOgB,EAAa,CAAEoH,YAAY,IAElC7I,OAAO0B,WAAWC,SAAS8F,eAAe,QAASH,EAAY,CAC7DwB,UAAU,EACVC,WAAY,OACZtH,cACAjB,KAAMe,IACLM,MAAKC,IACNA,EAAKiG,GAAG,WAAY9C,GACpBnD,EAAKiG,GAAG,WAAY9C,EAApB,GAEH,CAEDmC,eAAe4B,EAAf,GAA6F,IAApE,WAAE1B,EAAF,SAAchG,EAAd,eAAwBC,EAAxB,SAAwCC,EAAxC,eAAkDkE,GAAkB,EAC3F,MAAMjE,QAAoBgE,EAAWC,GAE/B3D,QAAmBV,EAAcC,EAAUC,EAAgBC,EAAUC,UAExDzB,OAAO0B,WAAWC,SAAS8F,eAAe,QAASH,EAAY,CAChF7F,cACAjB,KAAMuB,KAGH8F,UAAW,CACjB,CAED,MAAMoB,EAASC,IAAAA,OAAAA,OAAuB,CACpCC,aACEjE,OAAOkE,iBAAiB,WAAW,IAAsB,IAArB,KAAE5I,EAAF,OAAQ6I,GAAa,EAEnDA,IAAWnE,OAAOmE,QAAW7I,GAASA,EAAK2H,SAE/C7H,KAAKgJ,QAAQ9I,EAAK2H,QAAS3H,EAAK+I,KAAhC,IACC,GAEHC,IAAEtE,QAAQ6C,GAAG,SAAS,KACpBzH,KAAKkF,QAAQ,QAAb,IAGFlF,KAAKkF,QAAQ,UAAWiE,EAAAA,GAAAA,SACzB,EACDjE,QAAQ2C,GAAoB,IAAXoB,EAAW,uDAAJ,CAAC,EAMvB,OALgB,IAAIpF,SAAQC,IAC1B9D,KAAKoJ,KAAKvB,EAAS/D,GACnBuF,OAAOC,YAAY,CAAEzB,UAASoB,QAAQrE,OAAOmE,OAA7C,GAIH,EACDQ,OAAQ,CACN,WAAY,aACZ,kBAAmB,gBACnB,cAAe,iBACf,+CAAgD,aAElDxC,aACE/G,KAAKkF,QAAQ,mBAAmB3D,KAAKwF,EACtC,EACDqB,gBACEpI,KAAKkF,QAAQ,cAAc3D,KAAK6G,EACjC,EACDE,eAAekB,GACbxJ,KAAKkF,QAAQ,sBAAuB,CAAEsE,eAAcjI,KAAK+G,EAC1D,EACDI,UAAUe,EAAQC,EAAWF,GAC3BxJ,KAAKoJ,KAAK,WAAYV,GACtBQ,IAAE,QAAQS,OAAQ,mDAAmDF,KAAYC,IAAcF,EAAc,IAAIA,IAAgB,gBAClI,IAGH,SAASI,IACPV,IAAE,SAASS,OAAQ,oDAAoD,oCAAoCE,OAAO,mBAClHpF,EAAS,IAAIkE,EACbC,IAAAA,QAAAA,MAAuB,CAAEkB,WAAW,GACrC,C","sources":["webpack://care-ops-frontend/./src/js/formapp/utils.js","webpack://care-ops-frontend/./src/js/formapp/components.js","webpack://care-ops-frontend/./src/js/formapp.js"],"sourcesContent":["/* global Formio, FormioUtils */\nimport { extend, reduce } from 'underscore';\n\n// Note: Allows for setting the submission at form instantiation\n// https://github.com/formio/formio.js/pull/4580\nconst webformInit = Formio.Displays.displays.webform.prototype.init;\n\nFormio.Displays.displays.webform.prototype.init = function() {\n  if (this.options.data) {\n    const data = extend({}, this.options.data);\n    this._submission = { data };\n    this._data = data;\n  }\n  webformInit.call(this);\n};\n\n// NOTE: Evaluator should throw errors\n// https://github.com/formio/formio.js/issues/4613\nconst evaluator = Formio.Evaluator.evaluator;\nFormio.Evaluator.evaluator = function(func, ...params) {\n  try {\n    return evaluator(func, ...params);\n  } catch (e) {\n    /* eslint-disable-next-line no-console */\n    console.error(e);\n  }\n};\n\n// NOTE: Evaluate should also throw errors\nconst evaluate = Formio.Evaluator.evaluate;\nFormio.Evaluator.evaluate = function(func, ...params) {\n  try {\n    return evaluate(func, ...params);\n  } catch (e) {\n    /* eslint-disable-next-line no-console */\n    console.error(e);\n  }\n};\n\nfunction getScriptContext(contextScripts, baseContext) {\n  return Formio.createForm(document.createElement('div'), {}).then(form => {\n    const context = reduce(contextScripts, (memo, script) => {\n      return extend({}, memo, FormioUtils.evaluate(script, form.evalContext(memo)));\n    }, baseContext);\n\n    form.destroy();\n\n    return context;\n  });\n}\n\nfunction getSubmission(formData, formSubmission, reducers, evalContext) {\n  return Formio.createForm(document.createElement('div'), {}, { evalContext }).then(form => {\n    const submission = reduce(reducers, (memo, reducer) => {\n      return FormioUtils.evaluate(reducer, form.evalContext({ formSubmission: memo, formData })) || memo;\n    }, formSubmission);\n\n    form.destroy();\n\n    return submission;\n  });\n}\n\nconst hasChangedFunction = 'return function hasChanged(key) { return !_.isEqual(_.get(formSubmission, key), _.get(prevSubmission, key)); }';\n\nfunction getChangeReducers(form, changeReducers, curSubmission, prevSubmission) {\n  return reduce(changeReducers, (memo, reducer) => {\n    const context = form.evalContext({ formSubmission: memo, prevSubmission });\n    context.hasChanged = FormioUtils.evaluate(hasChangedFunction, context);\n    return FormioUtils.evaluate(reducer, context) || memo;\n  }, curSubmission);\n}\n\nexport {\n  getScriptContext,\n  getSubmission,\n  getChangeReducers,\n};\n","/* global Formio */\nimport { debounce } from 'underscore';\nconst NestedComponent = Formio.Components.components.nested;\nconst SelectComponent = Formio.Components.components.select;\n\n// Modifies the emptyValue to avoid error on php mutating {} to []\nclass SurveyComponent extends Formio.Components.components.survey {\n  get emptyValue() {\n    return [];\n  }\n}\n\nFormio.Components.components.survey = SurveyComponent;\n\nclass SnippetComponent extends NestedComponent {\n  constructor(...args) {\n    super(...args);\n    this.noField = true;\n  }\n  static schema(...extendArgs) {\n    return NestedComponent.schema({\n      label: 'Snippet',\n      key: 'snippet',\n      type: 'snippet',\n      components: [],\n      input: false,\n      persistent: false,\n      snippet: null,\n    }, ...extendArgs);\n  }\n}\n\n// NOTE: Outside of the schema much of the logic is slightly modified from SelectComponent\nclass DirectoryComponent extends SelectComponent {\n  static schema(...extend) {\n    return SelectComponent.schema({\n      label: 'Directory',\n      key: 'directory',\n      type: 'directory',\n      dataSrc: 'custom',\n      searchField: true,\n      customOptions: {\n        noChoicesText: 'Type a minimum of 3 characters for results',\n      },\n    }, ...extend);\n  }\n\n  get defaultSchema() {\n    return DirectoryComponent.schema();\n  }\n\n  constructor(...args) {\n    super(...args);\n    this.updateCustomItems = debounce(this.updateCustomItems, 300);\n  }\n\n  updateItems(searchInput, forceUpdate) {\n    if (!this.visible) {\n      this.itemsLoadedResolve();\n      return;\n    }\n\n    this.updateCustomItems(forceUpdate, searchInput);\n  }\n\n  // NOTE: Biggest modification is exposing the searchInput to the custom code\n  getCustomItems(searchInput) {\n    if (!searchInput || searchInput.length < 3) return Promise.resolve([]);\n\n    return this.evaluate(this.component.data.custom, {\n      values: [],\n      searchInput,\n    }, 'values');\n  }\n\n  updateCustomItems(forceUpdate, searchInput) {\n    if (!forceUpdate && !this.active) {\n      this.itemsLoadedResolve();\n      return;\n    }\n\n    this.loading = true;\n    this.getCustomItems(searchInput)\n      .then(items => {\n        this.loading = false;\n        this.setItems(items || []);\n      })\n      .catch(err => {\n        this.handleLoadingError(err);\n      });\n  }\n}\n\nFormio.use({\n  components: {\n    snippet: SnippetComponent,\n    directory: DirectoryComponent,\n  },\n});\n","/* global Formio, FormioUtils */\nimport 'formiojs/dist/formio.form.min';\nimport 'formiojs/dist/formio.form.css';\nimport '@fortawesome/fontawesome-pro/scss/fontawesome.scss';\nimport '@fortawesome/fontawesome-pro/scss/v4-shims.scss';\nimport '@fortawesome/fontawesome-pro/scss/solid.scss';\nimport 'scss/formapp/bootstrap.min.css';\n\nimport 'scss/formapp-core.scss';\n\nimport { extend, map, debounce } from 'underscore';\nimport $ from 'jquery';\nimport Backbone from 'backbone';\nimport Handlebars from 'handlebars/runtime';\nimport parsePhoneNumber from 'libphonenumber-js/min';\n\nimport { versions } from './config';\n\nimport {\n  getScriptContext,\n  getSubmission,\n  getChangeReducers,\n} from 'js/formapp/utils';\n\nimport 'js/formapp/components';\n\nimport 'scss/formapp/comment.scss';\nimport 'scss/formapp/form.scss';\nimport 'scss/formapp/formio-overrides.scss';\nimport 'scss/formapp/print.scss';\nimport 'scss/formapp/pdf.scss';\n\nimport 'js/regions/preload.scss';\n\nlet router;\n\nfunction scrollTop() {\n  window.scrollTo({ top: 0 });\n}\n\nfunction getDirectory(directoryName, query) {\n  return router.request('fetch:directory', { directoryName, query });\n}\n\nfunction getContext(contextScripts) {\n  return getScriptContext(contextScripts, { getDirectory, Handlebars, TEMPLATES: {}, parsePhoneNumber });\n}\n\nlet prevSubmission;\n\nconst onChange = function(form, changeReducers) {\n  const data = getChangeReducers(form, changeReducers, structuredClone(form.submission.data), prevSubmission);\n\n  form.data = data;\n  form.setSubmission({ data }, { fromChangeReducers: true, fromSubmission: false });\n\n  prevSubmission = structuredClone(form.submission.data);\n};\n\nconst onChangeDebounce = debounce(onChange, 100);\n\nconst updateSubmision = debounce(function(submission) {\n  router.request('update:storedSubmission', submission);\n}, 2000);\n\nasync function renderForm({ definition, storedSubmission, formData, formSubmission, reducers, changeReducers, contextScripts, beforeSubmit }) {\n  const evalContext = await getContext(contextScripts);\n\n  const submission = storedSubmission || await getSubmission(formData, formSubmission, reducers, evalContext);\n  prevSubmission = structuredClone(submission);\n\n  const form = await Formio.createForm(document.getElementById('root'), definition, {\n    evalContext,\n    data: submission,\n    onChange({ fromChangeReducers }, { instance }) {\n      if (fromChangeReducers && form.initialized) return;\n\n      // Prevents clearing submission on add/edit of editgrid\n      if (instance && instance.inEditGrid) return;\n\n      updateSubmision(form.submission.data);\n\n      onChangeDebounce(form, changeReducers);\n    },\n  });\n\n  form.nosubmit = true;\n\n  router.off('form:submit');\n  router.off('form:errors');\n\n  router.on({\n    'form:errors'(errors) {\n      // NOTE: maps errors due to https://github.com/formio/formio.js/issues/3970\n      form.showErrors(map(errors, error => {\n        return { message: error };\n      }), true);\n    },\n    'form:submit'() {\n      form.submit();\n    },\n  });\n\n  form.on('prevPage', scrollTop);\n  form.on('nextPage', scrollTop);\n\n  form.on('error', () => {\n    router.request('ready:form');\n  });\n\n  form.on('submit', response => {\n    // Always run one last change event on submit\n    onChangeDebounce.cancel();\n    onChange(form, changeReducers);\n    form.setPristine(false);\n    if (!form.checkValidity(response.data, true, response.data)) {\n      form.emit('error');\n      return;\n    }\n\n    const data = FormioUtils.evaluate(beforeSubmit, form.evalContext({ formSubmission: response.data })) || {};\n\n    router.request('submit:form', { response: extend({}, response, { data }) });\n  });\n\n  router.request('ready:form');\n}\n\nasync function renderPreview({ definition, contextScripts }) {\n  const evalContext = await getContext(contextScripts);\n\n  extend(evalContext, { isPreview: true });\n\n  Formio.createForm(document.getElementById('root'), definition, { evalContext });\n}\n\nasync function renderResponse({ definition, formSubmission, contextScripts }) {\n  const evalContext = await getContext(contextScripts);\n\n  extend(evalContext, { isResponse: true });\n\n  Formio.createForm(document.getElementById('root'), definition, {\n    readOnly: true,\n    renderMode: 'form',\n    evalContext,\n    data: formSubmission,\n  }).then(form => {\n    form.on('prevPage', scrollTop);\n    form.on('nextPage', scrollTop);\n  });\n}\n\nasync function renderPdf({ definition, formData, formSubmission, reducers, contextScripts }) {\n  const evalContext = await getContext(contextScripts);\n\n  const submission = await getSubmission(formData, formSubmission, reducers, evalContext);\n\n  const form = await Formio.createForm(document.getElementById('root'), definition, {\n    evalContext,\n    data: submission,\n  });\n\n  form.nosubmit = true;\n}\n\nconst Router = Backbone.Router.extend({\n  initialize() {\n    window.addEventListener('message', ({ data, origin }) => {\n      /* istanbul ignore next: security check */\n      if (origin !== window.origin || !data || !data.message) return;\n\n      this.trigger(data.message, data.args);\n    }, false);\n\n    $(window).on('focus', () => {\n      this.request('focus');\n    });\n\n    this.request('version', versions.frontend);\n  },\n  request(message, args = {}) {\n    const request = new Promise(resolve => {\n      this.once(message, resolve);\n      parent.postMessage({ message, args }, window.origin);\n    });\n\n    return request;\n  },\n  routes: {\n    'formapp/': 'renderForm',\n    'formapp/preview': 'renderPreview',\n    'formapp/:id': 'renderResponse',\n    'formapp/pdf/:formId/:patientId(/:responseId)': 'renderPdf',\n  },\n  renderForm() {\n    this.request('fetch:form:data').then(renderForm);\n  },\n  renderPreview() {\n    this.request('fetch:form').then(renderPreview);\n  },\n  renderResponse(responseId) {\n    this.request('fetch:form:response', { responseId }).then(renderResponse);\n  },\n  renderPdf(formId, patientId, responseId) {\n    this.once('form:pdf', renderPdf);\n    $('body').append(`<iframe class=\"iframe-hidden\" src=\"/formservice/${ formId }/${ patientId }${ responseId ? `/${ responseId }` : '' }\"></iframe>`);\n  },\n});\n\nfunction startFormApp() {\n  $('#root').append(`<div class=\"spinner\"><div class=\"spinner-circle\">${ '<div class=\"spinner-child\"></div>'.repeat(12) }</div></div>`);\n  router = new Router();\n  Backbone.history.start({ pushState: true });\n}\n\nexport {\n  startFormApp,\n};\n"],"names":["webformInit","Formio","Displays","displays","webform","prototype","init","this","options","data","extend","_submission","_data","call","evaluator","Evaluator","func","params","e","console","error","evaluate","getSubmission","formData","formSubmission","reducers","evalContext","createForm","document","createElement","then","form","submission","reduce","memo","reducer","FormioUtils","destroy","NestedComponent","Components","components","nested","SelectComponent","select","SurveyComponent","survey","emptyValue","DirectoryComponent","schema","label","key","type","dataSrc","searchField","customOptions","noChoicesText","defaultSchema","constructor","super","updateCustomItems","debounce","updateItems","searchInput","forceUpdate","visible","itemsLoadedResolve","getCustomItems","length","Promise","resolve","component","custom","values","active","loading","items","setItems","catch","err","handleLoadingError","router","prevSubmission","scrollTop","window","scrollTo","top","getDirectory","directoryName","query","request","getContext","contextScripts","baseContext","context","script","getScriptContext","Handlebars","TEMPLATES","parsePhoneNumber","use","snippet","noField","extendArgs","input","persistent","directory","onChange","changeReducers","curSubmission","hasChanged","getChangeReducers","structuredClone","setSubmission","fromChangeReducers","fromSubmission","onChangeDebounce","updateSubmision","async","renderForm","definition","storedSubmission","beforeSubmit","getElementById","instance","initialized","inEditGrid","nosubmit","off","on","errors","showErrors","map","message","submit","response","cancel","setPristine","checkValidity","emit","renderPreview","isPreview","renderResponse","isResponse","readOnly","renderMode","renderPdf","Router","Backbone","initialize","addEventListener","origin","trigger","args","$","versions","once","parent","postMessage","routes","responseId","formId","patientId","append","startFormApp","repeat","pushState"],"sourceRoot":""}