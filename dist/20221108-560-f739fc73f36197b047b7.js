"use strict";(globalThis.webpackChunkcare_ops_frontend=globalThis.webpackChunkcare_ops_frontend||[]).push([[560],{9560:(t,e,i)=>{var o=i(4822),s=i(8088),n=i.n(s),r=i(5291),a=i.n(r),l=i(7198),c=i(7739),h=i.n(c),d=i(7027),u=i(9203),g=i.n(u),p=i(4257),m=i(3018),f=i(1267),w=i(4861),_=i(1441),y=i(1188);const v="patient-actions",{parseRelationship:R}=f.Z,Z=function(t,e){return t&&"owner"!==e?R(t,e):t},q=m.Z.extend({urlRoot(){if(this.isNew()){const t=this.get("_flow");return t?`/api/flows/${t}/relationships/actions`:`/api/patients/${this.get("_patient")}/relationships/actions`}return"/api/actions"},type:v,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Action name required"},hasTag(t){return(0,l.r3)(this.get("tags"),t)},getForm(){const t=this.get("_form");if(t)return h().request("entities","forms:model",t)},getFormResponses(){return h().request("entities","formResponses:collection",this.get("_form_responses"),{comparator:(t,e)=>(0,w.XQ)("desc",t.get("_created_at"),e.get("_created_at"))})},getPatient(){return h().request("entities","patients:model",this.get("_patient"))},getOwner(){const t=this.get("_owner");return h().request("entities",`${t.type}:model`,t.id)},getFlow(){if(this.get("_flow"))return h().request("entities","flows:model",this.get("_flow"))},getState(){return h().request("entities","states:model",this.get("_state"))},isDone(){return this.getState().isDone()},isOverdue(){if(this.isDone())return!1;const t=this.get("due_date"),e=this.get("due_time");if(!e)return g()(t).isBefore(g()(),"day");const i=g()(`${t} ${e}`);return i.isBefore(g()(),"day")||i.isBefore(g()(),"minute")},isAdHoc(){return!this.get("_program_action")&&!this.get("_flow")},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveDueDate(t){return t?this.save({due_date:t.format("YYYY-MM-DD")}):this.save({due_date:null,due_time:null})},saveDueTime(t){return t?this.save({due_time:t}):this.save({due_time:null})},saveState(t){const e={_state:t.id},i=this.get("sharing");return t.isDone()&&![y.q$.DISABLED,y.q$.RESPONDED].includes(i)&&(e.sharing=y.q$.CANCELED),this.save(e,{relationships:{state:this.toRelation(t)}})},saveOwner(t){return this.save({_owner:t},{relationships:{owner:this.toRelation(t)}})},saveAll(t){this.isNew()&&(t=(0,l.l7)({},this.attributes,t));const e={flow:this.toRelation(t._flow,"flows"),form:this.toRelation(t._form,"forms"),owner:this.toRelation(t._owner),state:this.toRelation(t._state,"states"),"program-action":this.toRelation(t._program_action,"program-actions")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:Z}),C=(0,d.Z)(q,v),x=p.Z.extend({url:"/api/actions",model:C,parseRelationship:Z,save(t){const e=this.invoke("saveAll",t);return a().when(...e)},getPatients(){return h().request("entities","patients:collection",this.invoke("getPatient"))},groupByDate(){const t=this.groupBy("due_date");return(0,l.u4)((0,l.XP)(t),((e,i)=>(e.add({date:i,actions:new x(t[i])}),e)),new(n().Collection)([]))}});new(o.Z.extend({Entity:{_Model:q,Model:C,Collection:x},radioRequests:{"actions:model":"getModel","actions:collection":"getCollection","fetch:actions:model":"fetchAction","fetch:actions:collection":"fetchActions","fetch:actions:collection:byPatient":"fetchActionsByPatient","fetch:actions:collection:byFlow":"fetchActionsByFlow"},fetchAction(t){const e=["program-action.program","flow.program-flow.program"].join();return this.fetchModel(t,{data:{include:e}})},fetchActions(t){let{filter:e}=t;const i={filter:e};return this.fetchCollection({data:i})},fetchActionsByPatient(t){let{patientId:e,filter:i}=t;const o={filter:i},s=`/api/patients/${e}/relationships/actions`;return this.fetchCollection({url:s,data:o})},fetchActionsByFlow(t){const e=`/api/flows/${t}/relationships/actions`;return this.fetchCollection({url:e})}}));var M=i(7948),A=i(7201);const b="clinicians",E=m.Z.extend({type:b,urlRoot:"/api/clinicians",preinitialize(){this.on("change:_team",this.onChangeTeam)},validate:t=>(0,_.Z)(t.name)?(0,_.Z)(t.email)?t._role?void 0:"A clinician role is required":"A clinician email address is required":"A clinician name is required",onChangeTeam(){const t=h().request("entities","teams:model",this.previous("_team"));t.set("_clinicians",(0,l.d1)(t.get("_clinicians"),{id:this.id}));const e=h().request("entities","teams:model",this.get("_team"));e.set("_clinicians",(0,l.G0)(e.get("_clinicians"),[{id:this.id}]))},getGroups(){return h().request("entities","groups:collection",this.get("_groups"))},addGroup(t){const e=this.getGroups();e.add(t),this.set("_groups",this.toRelation(e,"groups").data)},removeGroup(t){const e=this.getGroups();e.remove(t),this.set("_groups",this.toRelation(e,"groups").data)},getTeam(){return this.hasTeam()?h().request("entities","teams:model",this.get("_team")):h().request("entities","teams:model",{name:A.ZP.patients.sidebar.action.activityViews.systemTeam})},hasTeam(){const t=this.get("_team");return t&&t!==M.Z},getRole(){return h().request("entities","roles:model",this.get("_role"))},can(t){const e=this.getRole().get("permissions");return(0,l.q9)(e,t)},saveRole(t){const e={_role:t.id};return this.save(e,{relationships:{role:this.toRelation(t)}})},saveTeam(t){const e=`/api/clinicians/${this.id}/relationships/team`;this.set({_team:t.id}),this.sync("update",this,{url:e,data:JSON.stringify(this.toRelation(t))})},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={groups:this.toRelation(t._groups,"groups"),team:this.toRelation(t._team,"teams"),role:this.toRelation(t._role,"roles")};return this.save(t,{relationships:e},{wait:!0})},getInitials(){const t=String(this.get("name")).split(" ");return 1===t.length?(0,l.Ps)(t).charAt(0):`${(0,l.Ps)(t).charAt(0)}${(0,l.Z$)(t).charAt(0)}`},isEditable(){return!this.get("last_active_at")},isActive(){const t=this.hasTeam(),e=!!(0,l.dp)(this.get("_groups")),i=this.get("last_active_at");return t&&e&&i}}),P=(0,d.Z)(E,b),F=p.Z.extend({url:"/api/clinicians",model:P,comparator:"name"}),S=(new(o.Z.extend({Entity:{_Model:E,Model:P,Collection:F},radioRequests:{"clinicians:model":"getModel","clinicians:collection":"getCollection","fetch:clinicians:collection":"fetchCollection","fetch:clinicians:current":"fetchCurrentClinician","fetch:clinicians:model":"fetchModel"},fetchCurrentClinician(){return this.fetchBy("/api/clinicians/me")}})),"comments"),D=m.Z.extend({type:S,urlRoot(){return this.isNew()?`/api/actions/${this.get("_action")}/relationships/comments`:"/api/comments"},validate(t){let{message:e}=t;if(!(0,_.Z)(e))return"Comment message required."},getClinician(){return h().request("entities","clinicians:model",this.get("_clinician"))}}),B=(0,d.Z)(D,S),T=p.Z.extend({model:B}),$=(new(o.Z.extend({Entity:{_Model:D,Model:B,Collection:T},radioRequests:{"comments:model":"getModel","fetch:comments:collection:byAction":"fetchCommentsByAction"},fetchCommentsByAction(t){const e=`/api/actions/${t}/relationships/comments`;return this.fetchCollection({url:e})}})),"dashboards"),I=m.Z.extend({type:$,urlRoot:"/api/dashboards"}),O=(0,d.Z)(I,$),N=p.Z.extend({url:"/api/dashboards",model:O}),L=(new(o.Z.extend({Entity:{_Model:I,Model:O,Collection:N},radioRequests:{"dashboards:model":"getModel","dashboards:collection":"getCollection","fetch:dashboards:model":"fetchModel","fetch:dashboards:collection":"fetchCollection"}})),m.Z.extend({type:"directories",url(){return`/api/directory/${this.get("slug")}`},getOptions(){if(this.options)return this.options;const t=(0,l.UI)(this.get("value"),(t=>({name:t,id:t})));return this.options=new p.Z(t),this.options}})),k=p.Z.extend({url:"/api/directories",model:L}),G=(new(o.Z.extend({Entity:{Model:L,Collection:k},radioRequests:{"fetch:directories:model":"fetchDirectory","fetch:directories:filterable":"fetchFilterable"},fetchDirectory:(t,e)=>new L({slug:t}).fetch({data:e}),fetchFilterable(){return this.fetchCollection({data:{filter:{filterable:!0}}})}})),"events"),U=m.Z.extend({type:G,getClinician(){return h().request("entities","clinicians:model",this.get("_clinician"))},getRecipient(){if(this.get("_recipient"))return h().request("entities","patients:model",this.get("_recipient"))},getEditor(){return this.get("_editor")?h().request("entities","clinicians:model",this.get("_editor")):h().request("entities","clinicians:model",{name:"RoundingWell"})},getTeam(){return h().request("entities","teams:model",this.get("_team"))},getState(){return h().request("entities","states:model",this.get("_state"))},getProgram(){if(this.get("_program"))return h().request("entities","programs:model",this.get("_program"))},getForm(){if(this.get("_form"))return h().request("entities","forms:model",this.get("_form"))}}),j=(0,d.Z)(U,G),H=p.Z.extend({model:j}),W=(new(o.Z.extend({Entity:{_Model:U,Model:j,Collection:H},radioRequests:{"events:model":"getModel","events:collection":"getCollection","fetch:actionEvents:collection":"fetchActionEvents","fetch:flowEvents:collection":"fetchFlowEvents"},fetchActionEvents(t){return this.fetchCollection({url:`/api/actions/${t}/activity`})},fetchFlowEvents(t){return this.fetchCollection({url:`/api/flows/${t}/activity`})}})),"flows"),{parseRelationship:J}=f.Z,z=function(t,e){return t&&"owner"!==e?J(t,e):t},Y=m.Z.extend({urlRoot(){return this.isNew()?`/api/patients/${this.get("_patient")}/relationships/flows`:"/api/flows"},type:W,getPatient(){return h().request("entities","patients:model",this.get("_patient"))},getOwner(){const t=this.get("_owner");return h().request("entities",`${t.type}:model`,t.id)},getState(){return h().request("entities","states:model",this.get("_state"))},getProgramFlow(){return h().request("entities","programFlows:model",this.get("_program_flow"))},isDone(){return this.getState().isDone()},isAllDone(){const{complete:t,total:e}=this.get("_progress");return t===e},saveState(t){return this.save({_state:t.id},{relationships:{state:this.toRelation(t)}})},saveOwner(t){return this.save({_owner:t},{relationships:{owner:this.toRelation(t)}})},applyOwner(t){const e=`${this.url()}/relationships/actions`,i={owner:this.toRelation(t)};return a().ajax({method:"PATCH",url:e,data:JSON.stringify({data:{relationships:i}})})},saveAll(t){this.isNew()&&(t=(0,l.l7)({},this.attributes,t));const e={state:this.toRelation(t._state,"states"),owner:this.toRelation(t._owner),"program-flow":this.toRelation(t._program_flow,"program-flows")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:z}),Q=(0,d.Z)(Y,W),V=p.Z.extend({url:"/api/flows",model:Q,parseRelationship:z,save(t){const e=this.invoke("saveAll",t);return a().when(...e)},applyOwner(t){const e=this.invoke("applyOwner",t);return a().when(...e)},getPatients(){return h().request("entities","patients:collection",this.invoke("getPatient"))}});new(o.Z.extend({Entity:{_Model:Y,Model:Q,Collection:V},radioRequests:{"flows:model":"getModel","flows:collection":"getCollection","fetch:flows:model":"fetchFlow","fetch:flows:collection":"fetchFlows","fetch:flows:collection:byPatient":"fetchFlowsByPatient"},fetchFlow(t){const e=["program-flow","program-flow.program","program-flow.program-actions"].join();return this.fetchModel(t,{data:{include:e}})},fetchFlows(t){let{filter:e}=t;const i={filter:e};return this.fetchCollection({data:i})},fetchFlowsByPatient(t){let{patientId:e,filter:i}=t;const o={filter:i},s=`/api/patients/${e}/relationships/flows`;return this.fetchCollection({url:s,data:o})}})),i(8380);const X="form-responses",K=m.Z.extend({type:X,urlRoot:"/api/form-responses",saveAll(){const t=this.attributes,e={form:this.toRelation(t._form,"forms"),patient:this.toRelation(t._patient,"patients"),action:this.toRelation(t._action,"patient-actions")};return this.save(t,{relationships:e},{wait:!0})}}),tt=(0,d.Z)(K,X),et=p.Z.extend({url:"/api/form-responses",model:tt}),it=(new(o.Z.extend({Entity:{_Model:K,Model:tt,Collection:et},radioRequests:{"formResponses:model":"getModel","formResponses:collection":"getCollection","fetch:formResponses:submission":"fetchSubmission","fetch:formResponses:latestSubmission":"fetchLatestSubmission"},fetchSubmission:t=>t?a().ajax(`/api/form-responses/${t}/response`):[{}],fetchLatestSubmission:(t,e)=>a().ajax(`/api/patients/${t}/form-responses/latest?filter[form]=${e}`)})),"groups"),ot=m.Z.extend({type:it,urlRoot:"/api/groups",getAssignableClinicians(){const t=h().request("entities","clinicians:collection",this.get("_clinicians")),e=t.filter((t=>t.isActive()&&t.get("enabled")&&t.can("work:own")));return t.reset(e),t},addClinician(t){const e=`/api/groups/${this.id}/relationships/clinicians`,i=t.get("_groups");return t.set({_groups:(0,l.G0)(i,[{id:this.id}])}),this.set({_clinicians:(0,l.G0)(this.get("_clinicians"),[{id:t.id}])}),this.sync("create",this,{url:e,data:JSON.stringify({data:[{id:t.id,type:t.type}]})})},removeClinician(t){const e=`/api/groups/${this.id}/relationships/clinicians`;return t.set({_groups:(0,l.d1)(t.get("_groups"),{id:this.id})}),this.set({_clinicians:(0,l.d1)(this.get("_clinicians"),{id:t.id})}),this.sync("delete",this,{url:e,data:JSON.stringify({data:[{id:t.id,type:t.type}]})})}}),st=(0,d.Z)(ot,it),nt=p.Z.extend({url:"/api/groups",model:st}),rt=(new(o.Z.extend({Entity:{_Model:ot,Model:st,Collection:nt},radioRequests:{"groups:model":"getModel","groups:collection":"getCollection","fetch:groups:collection":"fetchCollection"}})),"organizations"),at=m.Z.extend({getStates(){return this.get("states").clone()},getActiveTeams(){const t=this.getTeams();return t.reset(t.filter((t=>t.hasClinicians()))),t},getTeams(){return this.get("teams").clone()},getForms(){return this.get("forms").clone()},getSetting(t){return this.get("settings").get(t)},type:rt}),lt=(0,d.Z)(at,rt),ct=(new(o.Z.extend({Entity:{_Model:at,Model:lt},radioRequests:{"organizations:model":"getModel"}})),"patient-fields"),ht=m.Z.extend({type:ct,getValue(){const t=this.get("value");return(0,l.Kn)(t)&&(0,l.xb)(t)?null:t}}),dt=(0,d.Z)(ht,ct),ut=p.Z.extend({model:dt}),gt=(new(o.Z.extend({Entity:{_Model:ht,Model:dt,Collection:ut},radioRequests:{"patientFields:model":"getModel","patientFields:collection":"getCollection","fetch:patientFields:model":"fetchPatientField"},fetchPatientField(t,e){const i=`/api/patients/${t}/fields/${e}`;return this.fetchModel(e,{url:i,abort:!1}).then((t=>{this.getModel(t.attributes)}))}})),"patients"),pt=m.Z.extend({type:gt,urlRoot:"/api/patients",validate(t){let{first_name:e,last_name:i,birth_date:o,sex:s,_groups:n}=t;const r={};if(e&&i||(r.name="required"),s||(r.sex="required"),n&&n.length||(r.groups="required"),o?g()(o).isAfter()&&(r.birth_date="invalidDate"):r.birth_date="required",!(0,l.xb)(r))return r},getGroups(){return h().request("entities","groups:collection",this.get("_groups"))},getFields(){return h().request("entities","patientFields:collection",this.get("_patient_fields"))},addGroup(t){const e=this.getGroups();e.add(t),this.set("_groups",e.map((t=>t.pick("id"))))},removeGroup(t){const e=this.getGroups();e.remove(t),this.set("_groups",e.map((t=>t.pick("id"))))},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={groups:this.toRelation(t._groups,"groups")};return this.save(t,{relationships:e},{wait:!0})},canEdit(){return this.isNew()||"manual"===this.get("source")},getSortName(){return(this.get("last_name")+this.get("first_name")).toLowerCase()}}),mt=(0,d.Z)(pt,gt),ft=p.Z.extend({url:"/api/patients",model:mt,getSharedGroups(){const t=(0,l.jg)(this.invoke("getGroups"),"models");return h().request("entities","groups:collection",(0,l.jV)(...t))}}),wt=(new(o.Z.extend({Entity:{_Model:pt,Model:mt,Collection:ft},radioRequests:{"patients:model":"getModel","patients:collection":"getCollection","fetch:patients:model":"fetchModel","fetch:patients:model:byAction":"fetchPatientByAction","fetch:patients:model:byFlow":"fetchPatientByFlow"},fetchPatientByAction(t){return this.fetchBy(`/api/actions/${t}/patient`)},fetchPatientByFlow(t){return this.fetchBy(`/api/flows/${t}/patient`)}})),m.Z.extend({type:"patients-search-results"})),_t=p.Z.extend({url:"/api/patients",model:wt,initialize(){this._debouncedSearch=(0,l.Ds)(this._debouncedSearch,150)},prevSearch:"",_xhr:{abort:l.ZT},search(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t.length<3)return t.length&&this.prevSearch.includes(t)||(delete this._hasIdentifiers,this.reset(),this.prevSearch=""),this._debouncedSearch.cancel(),void this._xhr.abort();this.prevSearch=t,this.isSearching=!0,this._debouncedSearch(t)},hasIdentifiers(){return(0,l.jn)(this._hasIdentifiers)||(this._hasIdentifiers=!!this.find((t=>(0,l.U2)(t.get("identifiers"),"length")))),this._hasIdentifiers},_debouncedSearch(t){const e={search:t};delete this._hasIdentifiers,this._xhr=this.fetch({data:{filter:e}}),this._xhr.then((()=>{this.isSearching=!1,this.trigger("search",this)}))}});new(o.Z.extend({Entity:{Model:wt,Collection:_t},radioRequests:{"searchPatients:collection":"getCollection"}}));var yt=i(1962);const vt="program-actions",{parseRelationship:Rt}=f.Z,Zt=function(t,e){return t&&"owner"!==e?Rt(t,e):t},qt=m.Z.extend({urlRoot:"/api/program-actions",type:vt,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Action name required"},getTags(){return h().request("entities","tags:collection",(0,yt.Z)(this.get("tags"),"text"))},addTag(t){const e=this.getTags();return e.add(t),this.save({tags:e.map("text")})},removeTag(t){const e=this.getTags();return e.remove(t),this.save({tags:e.map("text")})},getAction(t){let{patientId:e,flowId:i}=t;const o=h().request("bootstrap","currentUser"),s=h().request("bootstrap","currentOrg").getStates();return h().request("entities","actions:model",{name:this.get("name"),_flow:i,_patient:e,_state:s.at(0).id,_owner:this.get("_owner")||{id:o.id,type:"clinicians"},_program_action:this.id})},getOwner(){const t=this.get("_owner");if(t)return h().request("entities","teams:model",t.id)},saveOwner(t){return t=this.toRelation(t),this.save({_owner:t.data},{relationships:{owner:t}})},getForm(){const t=this.get("_form");if(t)return h().request("entities","forms:model",t)},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveForm(t){const e={_form:(t=this.toRelation(t)).data};return t.data||(e.outreach=y.Ww.DISABLED),this.save(e,{relationships:{form:t}})},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={owner:this.toRelation(t._owner,"teams"),form:this.toRelation(t._form,"forms"),"program-flow":this.toRelation(t._program_flow,"program-flows"),program:this.toRelation(t._program,"programs")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:Zt}),Ct=(0,d.Z)(qt,vt),xt=p.Z.extend({initialize(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.flowId=e.flowId,this.flowId&&(this.comparator="sequence")},url(){return this.flowId?`/api/program-flows/${this.flowId}/actions`:"/api/program-actions"},model:Ct,parseRelationship:Zt,updateSequences(){const t=this.map(((t,e)=>(t.set({sequence:e}),t.toJSONApi({sequence:e}))));return this.sync("patch",this,{url:this.url(),data:JSON.stringify({data:t})})}}),Mt=(new(o.Z.extend({Entity:{_Model:qt,Model:Ct,Collection:xt},radioRequests:{"programActions:model":"getModel","programActions:collection":"getCollection","fetch:programActions:model":"fetchModel","fetch:programActions:collection:byProgram":"fetchProgramActionsByProgram","fetch:programActions:collection":"fetchProgramActions","fetch:programActions:collection:byProgramFlow":"fetchProgramActionsByFlow"},fetchProgramActionsByProgram(t){let{programId:e}=t;const i=`/api/programs/${e}/relationships/actions`;return this.fetchCollection({url:i})},fetchProgramActions(){let{filter:t={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})},fetchProgramActionsByFlow:(t,e)=>new xt([],{flowId:t}).fetch(e)})),"program-flows"),{parseRelationship:At}=f.Z,bt=function(t,e){return t&&"owner"!==e?At(t,e):t},Et=m.Z.extend({urlRoot(){return this.isNew()?`/api/programs/${this.get("_program")}/relationships/flows`:"/api/program-flows"},type:Mt,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Flow name required"},getTags(){return h().request("entities","tags:collection",(0,yt.Z)(this.get("tags"),"text"))},addTag(t){const e=this.getTags();return e.add(t),this.save({tags:e.map("text")})},removeTag(t){const e=this.getTags();return e.remove(t),this.save({tags:e.map("text")})},getOwner(){const t=this.get("_owner");if(t)return h().request("entities","teams:model",t.id)},getFlow(t){const e=h().request("bootstrap","currentOrg").getStates();return h().request("entities","flows:model",{_patient:t,_program_flow:this.get("id"),_state:e.at(0).id})},saveOwner(t){return t=this.toRelation(t),this.save({_owner:t.data},{relationships:{owner:t}})},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={owner:this.toRelation(t._owner,"teams")};return this.save(t,{relationships:e},{wait:!0})},getActions(){return h().request("entities","programActions:collection",this.get("_program_actions"),{flowId:this.id})},parseRelationship:bt}),Pt=(0,d.Z)(Et,Mt),Ft=p.Z.extend({url:"/api/program-flows",model:Pt,parseRelationship:bt}),St=(new(o.Z.extend({Entity:{_Model:Et,Model:Pt,Collection:Ft},radioRequests:{"programFlows:model":"getModel","programFlows:collection":"getCollection","fetch:programFlows:model":"fetchModel","fetch:programFlows:collection:byProgram":"fetchProgramFlowsByProgram","fetch:programFlows:collection":"fetchProgramFlows"},fetchProgramFlowsByProgram(t){let{programId:e}=t;const i=`/api/programs/${e}/relationships/flows`;return this.fetchCollection({url:i})},fetchProgramFlows(){let{filter:t={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})}})),"programs"),Dt=m.Z.extend({type:St,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Program name required"},urlRoot:"/api/programs",getPublished(){const t=h().request("entities","programActions:collection",this.get("_program_actions")),e=h().request("entities","programFlows:collection",this.get("_program_flows")),i=y.t0.PUBLISHED,o=h().request("entities","programActions:collection",t.filter({status:i})),s=h().request("entities","programFlows:collection",e.filter({status:i}));return new(n().Collection)([...s.models,...o.models],{comparator:"name"})}}),Bt=(0,d.Z)(Dt,St),Tt=p.Z.extend({url:"/api/programs",model:Bt}),$t=(new(o.Z.extend({Entity:{_Model:Dt,Model:Bt,Collection:Tt},radioRequests:{"programs:model":"getModel","programs:collection":"getCollection","fetch:programs:model":"fetchModel","fetch:programs:collection":"fetchCollection","fetch:programs:model:byProgramFlow":"fetchProgramByProgramFlow"},fetchProgramByProgramFlow(t){return this.fetchBy(`/api/program-flows/${t}/program`)}})),"roles"),It=m.Z.extend({type:$t,urlRoot:"/api/roles"}),Ot=(0,d.Z)(It,$t),Nt=p.Z.extend({url:"/api/roles",model:Ot}),Lt=(new(o.Z.extend({Entity:{_Model:It,Model:Ot,Collection:Nt},radioRequests:{"roles:model":"getModel","roles:collection":"getCollection","fetch:roles:collection":"fetchCollection"}})),"settings"),kt=m.Z.extend({type:Lt,url:"/api/settings",parseModel(t){const e=t.reduce(((t,e)=>(t[e.id]=e.attributes.value,t)),{});return{id:"settings",...e}}}),Gt=(0,d.Z)(kt,Lt),Ut=p.Z.extend({url:"/api/settings",model:Gt}),jt=(new(o.Z.extend({Entity:{_Model:kt,Model:Gt,Collection:Ut},radioRequests:{"settings:model":"getModel","fetch:settings:model":"fetchModel"}})),"states"),Ht=m.Z.extend({type:jt,isDone(){return this.get("status")===y.lO.DONE}}),Wt=(0,d.Z)(Ht,jt),Jt=p.Z.extend({url:"/api/states",model:Wt}),zt=(new(o.Z.extend({Entity:{_Model:Ht,Model:Wt,Collection:Jt},radioRequests:{"states:model":"getModel","states:collection":"getCollection","fetch:states:collection":"fetchCollection"}})),"tags"),Yt=m.Z.extend({type:zt,idAttribute:"text"}),Qt=(0,d.Z)(Yt,zt),Vt=p.Z.extend({url:"/api/tags",model:Qt,parse:t=>(0,l.UI)(t.data,(t=>({text:t}))),comparator:"text"});let Xt;const Kt=(new(o.Z.extend({Entity:{_Model:Yt,Model:Qt,Collection:Vt},radioRequests:{"tags:model":"getModel","tags:collection":"getCollection","fetch:tags:collection":"fetchTags"},fetchTags(){return Xt||this.fetchCollection().then((t=>(Xt=t,t)))}})),"teams"),te=m.Z.extend({type:Kt,urlRoot:"/api/teams",hasClinicians(){const t=this.get("_clinicians");return t&&t.length}}),ee=(0,d.Z)(te,Kt),ie=p.Z.extend({url:"/api/teams",model:ee,comparator:"name"}),oe=(new(o.Z.extend({Entity:{_Model:te,Model:ee,Collection:ie},radioRequests:{"teams:model":"getModel","teams:collection":"getCollection","fetch:teams:collection":"fetchCollection"}})),"widgets"),se=m.Z.extend({type:oe}),ne=(0,d.Z)(se,oe),re=p.Z.extend({url:"/api/widgets",model:ne,modelId:t=>(0,l.EL)(`${t.id}-`)});new(o.Z.extend({Entity:{_Model:se,Model:ne,Collection:re},radioRequests:{"widgets:model":"getModel","widgets:collection":"getCollection","fetch:widgets:collection":"fetchWidgets"},fetchWidgets(){let{filter:t={}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})}}))},1188:(t,e,i)=>{i.d(e,{Ww:()=>o,cB:()=>r,lO:()=>a,q$:()=>s,t0:()=>n});const o={DISABLED:"disabled",PATIENT:"patient"},s={DISABLED:"disabled",PENDING:"pending",SENT:"sent",RESPONDED:"responded",CANCELED:"canceled",ERROR_NO_PHONE:"error_no_phone",ERROR_OPT_OUT:"error_opt_out",ERROR_SMS_FAILED:"error_sms_failed"},n={CONDITIONAL:"conditional",DRAFT:"draft",PUBLISHED:"published"},r=[{id:"today",unit:"day",prev:0},{id:"yesterday",unit:"day",prev:1},{id:"thisweek",unit:"week",prev:0},{id:"lastweek",unit:"week",prev:1},{id:"thismonth",unit:"month",prev:0},{id:"lastmonth",unit:"month",prev:1}],a={STARTED:"started",QUEUED:"queued",DONE:"done"}},4861:(t,e,i)=>{function o(t,e){return"desc"===t?-1*e:e}function s(t,e,i){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return e||(e=s),i||(i=s),o(t,e.localeCompare(i))}i.d(e,{XQ:()=>s}),i(7198)}}]);