"use strict";(self.webpackChunkcare_ops_frontend=self.webpackChunkcare_ops_frontend||[]).push([[949],{1949:(t,e,i)=>{var o=i(4822),s=i(8088),n=i.n(s),r=i(5291),a=i.n(r),l=i(7198),c=i(7739),d=i.n(c),h=i(7027),u=i(9203),p=i.n(u),g=i(4257),m=i(3018),f=i(1267),w=i(4861),_=i(1441),y=i(1188);const v="patient-actions",{parseRelationship:R}=f.Z,Z=function(t,e){return t&&"owner"!==e?R(t,e):t},q=m.Z.extend({urlRoot(){if(this.isNew()){const t=this.get("_flow");return t?`/api/flows/${t}/relationships/actions`:`/api/patients/${this.get("_patient")}/relationships/actions`}return"/api/actions"},type:v,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Action name required"},hasTag(t){return(0,l.r3)(this.get("tags"),t)},getForm(){const t=this.get("_form");if(t)return d().request("entities","forms:model",t)},getFormResponses(){return d().request("entities","formResponses:collection",this.get("_form_responses"),{comparator:(t,e)=>(0,w.XQ)("desc",t.get("_created_at"),e.get("_created_at"))})},getPatient(){return d().request("entities","patients:model",this.get("_patient"))},getOwner(){const t=this.get("_owner");return d().request("entities",`${t.type}:model`,t.id)},getFlow(){if(this.get("_flow"))return d().request("entities","flows:model",this.get("_flow"))},getState(){return d().request("entities","states:model",this.get("_state"))},isDone(){return this.getState().isDone()},isOverdue(){if(this.isDone())return!1;const t=this.get("due_date"),e=this.get("due_time");if(!e)return p()(t).isBefore(p()(),"day");const i=p()(`${t} ${e}`);return i.isBefore(p()(),"day")||i.isBefore(p()(),"minute")},isAdHoc(){return!this.get("_program_action")&&!this.get("_flow")},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveDueDate(t){return t?this.save({due_date:t.format("YYYY-MM-DD")}):this.save({due_date:null,due_time:null})},saveDueTime(t){return t?this.save({due_time:t}):this.save({due_time:null})},saveState(t){const e={_state:t.id},i=this.get("sharing");return t.isDone()&&![y.q$.DISABLED,y.q$.RESPONDED].includes(i)&&(e.sharing=y.q$.CANCELED),this.save(e,{relationships:{state:this.toRelation(t)}})},saveOwner(t){return this.save({_owner:t},{relationships:{owner:this.toRelation(t)}})},saveAll(t){this.isNew()&&(t=(0,l.l7)({},this.attributes,t));const e={flow:this.toRelation(t._flow,"flows"),form:this.toRelation(t._form,"forms"),owner:this.toRelation(t._owner),state:this.toRelation(t._state,"states"),"program-action":this.toRelation(t._program_action,"program-actions")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:Z}),C=(0,h.Z)(q,v),A=g.Z.extend({url:"/api/actions",model:C,parseRelationship:Z,save(t){const e=this.invoke("saveAll",t);return a().when(...e)},getPatients(){return d().request("entities","patients:collection",this.invoke("getPatient"))},groupByDate(){const t=this.groupBy("due_date");return(0,l.u4)((0,l.XP)(t),((e,i)=>(e.add({date:i,actions:new A(t[i])}),e)),new(n().Collection)([]))}});new(o.Z.extend({Entity:{_Model:q,Model:C,Collection:A},radioRequests:{"actions:model":"getModel","actions:collection":"getCollection","fetch:actions:model":"fetchAction","fetch:actions:collection":"fetchActions","fetch:actions:collection:byPatient":"fetchActionsByPatient","fetch:actions:collection:byFlow":"fetchActionsByFlow"},fetchAction(t){const e=["program-action.program","flow.program-flow.program"].join();return this.fetchModel(t,{data:{include:e}})},fetchActions(t){let{filter:e}=t;const i={filter:e};return this.fetchCollection({data:i})},fetchActionsByPatient(t){let{patientId:e,filter:i}=t;const o={filter:i},s=`/api/patients/${e}/relationships/actions`;return this.fetchCollection({url:s,data:o})},fetchActionsByFlow(t){const e=`/api/flows/${t}/relationships/actions`;return this.fetchCollection({url:e})}}));var M=i(7948),x=i(7201);const E="clinicians",P=m.Z.extend({type:E,urlRoot:"/api/clinicians",preinitialize(){this.on("change:_team",this.onChangeTeam)},validate:t=>(0,_.Z)(t.name)?(0,_.Z)(t.email)?void 0:"A clinician email address is required":"A clinician name is required",onChangeTeam(){const t=d().request("entities","teams:model",this.previous("_team"));t.set("_clinicians",(0,l.d1)(t.get("_clinicians"),{id:this.id}));const e=d().request("entities","teams:model",this.get("_team"));e.set("_clinicians",(0,l.G0)(e.get("_clinicians"),[{id:this.id}]))},getGroups(){return d().request("entities","groups:collection",this.get("_groups"))},getTeam(){const t=this.get("_team");return t&&t!==M.Z?d().request("entities","teams:model",this.get("_team")):d().request("entities","teams:model",{name:x.ZP.patients.sidebar.action.activityViews.systemTeam})},can(t){const e=this.get("access");if("view:assigned:actions"===t){const t=d().request("bootstrap","currentOrg:setting","restrict_employee_access");return!("employee"===e&&t)}if("reduced:patient:schedule"===t){const t=d().request("bootstrap","currentOrg:setting","reduced_patient_schedule");return"employee"===e&&t}return"manager"===e||"admin"===e},saveTeam(t){const e=`/api/clinicians/${this.id}/relationships/team`;this.set({_team:t.id}),this.sync("update",this,{url:e,data:JSON.stringify(this.toRelation(t))})},getInitials(){const t=String(this.get("name")).split(" ");return 1===t.length?(0,l.Ps)(t).charAt(0):`${(0,l.Ps)(t).charAt(0)}${(0,l.Z$)(t).charAt(0)}`},isEditable(){return!this.get("last_active_at")},isActive(){const t=!!this.get("_team"),e=!!(0,l.dp)(this.get("_groups")),i=this.get("last_active_at");return t&&e&&i}}),b=(0,h.Z)(P,E),F=g.Z.extend({url:"/api/clinicians",model:b,comparator:"name"}),S=(new(o.Z.extend({Entity:{_Model:P,Model:b,Collection:F},radioRequests:{"clinicians:model":"getModel","clinicians:collection":"getCollection","fetch:clinicians:collection":"fetchCollection","fetch:clinicians:current":"fetchCurrentClinician","fetch:clinicians:model":"fetchModel"},fetchCurrentClinician(){return this.fetchBy("/api/clinicians/me")}})),"comments"),D=m.Z.extend({type:S,urlRoot(){return this.isNew()?`/api/actions/${this.get("_action")}/relationships/comments`:"/api/comments"},validate(t){let{message:e}=t;if(!(0,_.Z)(e))return"Comment message required."},getClinician(){return d().request("entities","clinicians:model",this.get("_clinician"))}}),B=(0,h.Z)(D,S),O=g.Z.extend({model:B}),$=(new(o.Z.extend({Entity:{_Model:D,Model:B,Collection:O},radioRequests:{"comments:model":"getModel","fetch:comments:collection:byAction":"fetchCommentsByAction"},fetchCommentsByAction(t){const e=`/api/actions/${t}/relationships/comments`;return this.fetchCollection({url:e})}})),"dashboards"),I=m.Z.extend({type:$,urlRoot:"/api/dashboards"}),N=(0,h.Z)(I,$),T=g.Z.extend({url:"/api/dashboards",model:N}),k=(new(o.Z.extend({Entity:{_Model:I,Model:N,Collection:T},radioRequests:{"dashboards:model":"getModel","dashboards:collection":"getCollection","fetch:dashboards:model":"fetchModel","fetch:dashboards:collection":"fetchCollection"}})),new(o.Z.extend({radioRequests:{"fetch:directory":"fetchDirectory"},fetchDirectory:(t,e)=>a().ajax({url:`/api/directory/${t}`,data:e})})),"events"),L=m.Z.extend({type:k,getClinician(){return d().request("entities","clinicians:model",this.get("_clinician"))},getRecipient(){if(this.get("_recipient"))return d().request("entities","patients:model",this.get("_recipient"))},getEditor(){return this.get("_editor")?d().request("entities","clinicians:model",this.get("_editor")):d().request("entities","clinicians:model",{name:"RoundingWell"})},getTeam(){return d().request("entities","teams:model",this.get("_team"))},getState(){return d().request("entities","states:model",this.get("_state"))},getProgram(){if(this.get("_program"))return d().request("entities","programs:model",this.get("_program"))},getForm(){if(this.get("_form"))return d().request("entities","forms:model",this.get("_form"))}}),G=(0,h.Z)(L,k),W=g.Z.extend({model:G}),j=(new(o.Z.extend({Entity:{_Model:L,Model:G,Collection:W},radioRequests:{"events:model":"getModel","events:collection":"getCollection","fetch:actionEvents:collection":"fetchActionEvents","fetch:flowEvents:collection":"fetchFlowEvents"},fetchActionEvents(t){return this.fetchCollection({url:`/api/actions/${t}/activity`})},fetchFlowEvents(t){return this.fetchCollection({url:`/api/flows/${t}/activity`})}})),"flows"),{parseRelationship:U}=f.Z,H=function(t,e){return t&&"owner"!==e?U(t,e):t},J=m.Z.extend({urlRoot(){return this.isNew()?`/api/patients/${this.get("_patient")}/relationships/flows`:"/api/flows"},type:j,getPatient(){return d().request("entities","patients:model",this.get("_patient"))},getOwner(){const t=this.get("_owner");return d().request("entities",`${t.type}:model`,t.id)},getState(){return d().request("entities","states:model",this.get("_state"))},getProgramFlow(){return d().request("entities","programFlows:model",this.get("_program_flow"))},isDone(){return this.getState().isDone()},isAllDone(){const{complete:t,total:e}=this.get("_progress");return t===e},saveState(t){return this.save({_state:t.id},{relationships:{state:this.toRelation(t)}})},saveOwner(t){return this.save({_owner:t},{relationships:{owner:this.toRelation(t)}})},applyOwner(t){const e=`${this.url()}/relationships/actions`,i={owner:this.toRelation(t)};return a().ajax({method:"PATCH",url:e,data:JSON.stringify({data:{relationships:i}})})},saveAll(t){this.isNew()&&(t=(0,l.l7)({},this.attributes,t));const e={state:this.toRelation(t._state,"states"),owner:this.toRelation(t._owner),"program-flow":this.toRelation(t._program_flow,"program-flows")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:H}),z=(0,h.Z)(J,j),Y=g.Z.extend({url:"/api/flows",model:z,parseRelationship:H,save(t){const e=this.invoke("saveAll",t);return a().when(...e)},applyOwner(t){const e=this.invoke("applyOwner",t);return a().when(...e)},getPatients(){return d().request("entities","patients:collection",this.invoke("getPatient"))}});new(o.Z.extend({Entity:{_Model:J,Model:z,Collection:Y},radioRequests:{"flows:model":"getModel","flows:collection":"getCollection","fetch:flows:model":"fetchFlow","fetch:flows:collection":"fetchFlows","fetch:flows:collection:byPatient":"fetchFlowsByPatient"},fetchFlow(t){const e=["program-flow","program-flow.program","program-flow.program-actions"].join();return this.fetchModel(t,{data:{include:e}})},fetchFlows(t){let{filter:e}=t;const i={filter:e};return this.fetchCollection({data:i})},fetchFlowsByPatient(t){let{patientId:e,filter:i}=t;const o={filter:i},s=`/api/patients/${e}/relationships/flows`;return this.fetchCollection({url:s,data:o})}})),i(8380);const Q="form-responses",V=m.Z.extend({type:Q,urlRoot:"/api/form-responses",saveAll(){const t=this.attributes,e={form:this.toRelation(t._form,"forms"),patient:this.toRelation(t._patient,"patients"),action:this.toRelation(t._action,"patient-actions")};return this.save(t,{relationships:e},{wait:!0})}}),X=(0,h.Z)(V,Q),K=g.Z.extend({url:"/api/form-responses",model:X}),tt=(new(o.Z.extend({Entity:{_Model:V,Model:X,Collection:K},radioRequests:{"formResponses:model":"getModel","formResponses:collection":"getCollection","fetch:formResponses:submission":"fetchSubmission","fetch:formResponses:latestSubmission":"fetchLatestSubmission"},fetchSubmission:t=>t?a().ajax(`/api/form-responses/${t}/response`):[{}],fetchLatestSubmission:(t,e)=>a().ajax(`/api/patients/${t}/form-responses/latest?filter[form]=${e}`)})),"groups"),et=m.Z.extend({type:tt,urlRoot:"/api/groups",getActiveClinicians(){const t=d().request("entities","clinicians:collection",this.get("_clinicians")),e=t.filter((t=>t.isActive()&&t.get("enabled")));return t.reset(e),t},addClinician(t){const e=`/api/groups/${this.id}/relationships/clinicians`,i=t.get("_groups")||[];return t.set({_groups:(0,l.G0)(i,[{id:this.id}])}),this.set({_clinicians:(0,l.G0)(this.get("_clinicians"),[{id:t.id}])}),this.sync("create",this,{url:e,data:JSON.stringify({data:[{id:t.id,type:t.type}]})})},removeClinician(t){const e=`/api/groups/${this.id}/relationships/clinicians`;return t.set({_groups:(0,l.d1)(t.get("_groups"),{id:this.id})}),this.set({_clinicians:(0,l.d1)(this.get("_clinicians"),{id:t.id})}),this.sync("delete",this,{url:e,data:JSON.stringify({data:[{id:t.id,type:t.type}]})})}}),it=(0,h.Z)(et,tt),ot=g.Z.extend({url:"/api/groups",model:it}),st=(new(o.Z.extend({Entity:{_Model:et,Model:it,Collection:ot},radioRequests:{"groups:model":"getModel","groups:collection":"getCollection","fetch:groups:collection":"fetchCollection"}})),"organizations"),nt=m.Z.extend({getStates(){return this.get("states").clone()},getActiveTeams(){const t=this.getTeams();return t.reset(t.filter((t=>t.hasClinicians()))),t},getTeams(){return this.get("teams").clone()},getForms(){return this.get("forms").clone()},getSetting(t){return this.get("settings").get(t)},type:st}),rt=(0,h.Z)(nt,st),at=(new(o.Z.extend({Entity:{_Model:nt,Model:rt},radioRequests:{"organizations:model":"getModel"}})),"patient-fields"),lt=m.Z.extend({type:at,getValue(){const t=this.get("value");return(0,l.Kn)(t)&&(0,l.xb)(t)?null:t}}),ct=(0,h.Z)(lt,at),dt=g.Z.extend({model:ct}),ht=(new(o.Z.extend({Entity:{_Model:lt,Model:ct,Collection:dt},radioRequests:{"patientFields:model":"getModel","patientFields:collection":"getCollection","fetch:patientFields:model":"fetchPatientField"},fetchPatientField(t,e){const i=`/api/patients/${t}/fields/${e}`;return this.fetchModel(e,{url:i,abort:!1}).then((t=>{this.getModel(t.attributes)}))}})),"patients"),ut=m.Z.extend({type:ht,urlRoot:"/api/patients",validate(t){let{first_name:e,last_name:i,birth_date:o,sex:s,_groups:n}=t;const r={};if(e&&i||(r.name="required"),s||(r.sex="required"),n&&n.length||(r.groups="required"),o?p()(o).isAfter()&&(r.birth_date="invalidDate"):r.birth_date="required",!(0,l.xb)(r))return r},getGroups(){return d().request("entities","groups:collection",this.get("_groups"))},getFields(){return d().request("entities","patientFields:collection",this.get("_patient_fields"))},addGroup(t){const e=this.getGroups();e.add(t),this.set("_groups",e.map((t=>t.pick("id"))))},removeGroup(t){const e=this.getGroups();e.remove(t),this.set("_groups",e.map((t=>t.pick("id"))))},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={groups:this.toRelation(t._groups,"groups")};return this.save(t,{relationships:e},{wait:!0})},canEdit(){return this.isNew()||"manual"===this.get("source")},getSortName(){return(this.get("last_name")+this.get("first_name")).toLowerCase()}}),pt=(0,h.Z)(ut,ht),gt=g.Z.extend({url:"/api/patients",model:pt,getSharedGroups(){const t=(0,l.jg)(this.invoke("getGroups"),"models");return d().request("entities","groups:collection",(0,l.jV)(...t))}}),mt=(new(o.Z.extend({Entity:{_Model:ut,Model:pt,Collection:gt},radioRequests:{"patients:model":"getModel","patients:collection":"getCollection","fetch:patients:model":"fetchModel","fetch:patients:model:byAction":"fetchPatientByAction","fetch:patients:model:byFlow":"fetchPatientByFlow"},fetchPatientByAction(t){return this.fetchBy(`/api/actions/${t}/patient`)},fetchPatientByFlow(t){return this.fetchBy(`/api/flows/${t}/patient`)}})),m.Z.extend({type:"patients-search-results"})),ft=g.Z.extend({url:"/api/patients",model:mt,initialize(){this._debouncedSearch=(0,l.Ds)(this._debouncedSearch,150)},search(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t.length<3)return t.length||this.reset(),void(this.isSearching=!1);this.isSearching=!0,this._debouncedSearch(t)},_debouncedSearch(t){const e={search:t};this.fetch({data:{filter:e}}).then((()=>{this.isSearching=!1,this.trigger("search",this)}))}}),wt=(new(o.Z.extend({Entity:{Model:mt,Collection:ft},radioRequests:{"searchPatients:collection":"getCollection"}})),"program-actions"),{parseRelationship:_t}=f.Z,yt=function(t,e){return t&&"owner"!==e?_t(t,e):t},vt=m.Z.extend({urlRoot:"/api/program-actions",type:wt,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Action name required"},getAction(t){let{patientId:e,flowId:i}=t;const o=d().request("bootstrap","currentUser"),s=d().request("bootstrap","currentOrg").getStates();return d().request("entities","actions:model",{name:this.get("name"),_flow:i,_patient:e,_state:s.at(0).id,_owner:this.get("_owner")||{id:o.id,type:"clinicians"},_program_action:this.id})},getOwner(){const t=this.get("_owner");if(t)return d().request("entities","teams:model",t.id)},saveOwner(t){return t=this.toRelation(t),this.save({_owner:t.data},{relationships:{owner:t}})},getForm(){const t=this.get("_form");if(t)return d().request("entities","forms:model",t)},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveForm(t){const e={_form:(t=this.toRelation(t)).data};return t.data||(e.outreach=y.Ww.DISABLED),this.save(e,{relationships:{form:t}})},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={owner:this.toRelation(t._owner,"teams"),form:this.toRelation(t._form,"forms"),"program-flow":this.toRelation(t._program_flow,"program-flows"),program:this.toRelation(t._program,"programs")};return this.save(t,{relationships:e},{wait:!0})},parseRelationship:yt}),Rt=(0,h.Z)(vt,wt),Zt=g.Z.extend({initialize(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.flowId=e.flowId,this.flowId&&(this.comparator="sequence")},url(){return this.flowId?`/api/program-flows/${this.flowId}/actions`:"/api/program-actions"},model:Rt,parseRelationship:yt,updateSequences(){const t=this.map(((t,e)=>(t.set({sequence:e}),t.toJSONApi({sequence:e}))));return this.sync("patch",this,{url:this.url(),data:JSON.stringify({data:t})})}}),qt=(new(o.Z.extend({Entity:{_Model:vt,Model:Rt,Collection:Zt},radioRequests:{"programActions:model":"getModel","programActions:collection":"getCollection","fetch:programActions:model":"fetchModel","fetch:programActions:collection:byProgram":"fetchProgramActionsByProgram","fetch:programActions:collection":"fetchProgramActions","fetch:programActions:collection:byProgramFlow":"fetchProgramActionsByFlow"},fetchProgramActionsByProgram(t){let{programId:e}=t;const i=`/api/programs/${e}/relationships/actions`;return this.fetchCollection({url:i})},fetchProgramActions(){let{filter:t={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})},fetchProgramActionsByFlow:(t,e)=>new Zt([],{flowId:t}).fetch(e)})),"program-flows"),{parseRelationship:Ct}=f.Z,At=function(t,e){return t&&"owner"!==e?Ct(t,e):t},Mt=m.Z.extend({urlRoot(){return this.isNew()?`/api/programs/${this.get("_program")}/relationships/flows`:"/api/program-flows"},type:qt,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Flow name required"},getOwner(){const t=this.get("_owner");if(t)return d().request("entities","teams:model",t.id)},getFlow(t){const e=d().request("bootstrap","currentOrg").getStates();return d().request("entities","flows:model",{_patient:t,_program_flow:this.get("id"),_state:e.at(0).id})},saveOwner(t){return t=this.toRelation(t),this.save({_owner:t.data},{relationships:{owner:t}})},saveAll(t){t=(0,l.l7)({},this.attributes,t);const e={owner:this.toRelation(t._owner,"teams")};return this.save(t,{relationships:e},{wait:!0})},getActions(){return d().request("entities","programActions:collection",this.get("_program_actions"),{flowId:this.id})},parseRelationship:At}),xt=(0,h.Z)(Mt,qt),Et=g.Z.extend({url:"/api/program-flows",model:xt,parseRelationship:At}),Pt=(new(o.Z.extend({Entity:{_Model:Mt,Model:xt,Collection:Et},radioRequests:{"programFlows:model":"getModel","programFlows:collection":"getCollection","fetch:programFlows:model":"fetchModel","fetch:programFlows:collection:byProgram":"fetchProgramFlowsByProgram","fetch:programFlows:collection":"fetchProgramFlows"},fetchProgramFlowsByProgram(t){let{programId:e}=t;const i=`/api/programs/${e}/relationships/flows`;return this.fetchCollection({url:i})},fetchProgramFlows(){let{filter:t={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})}})),"programs"),bt=m.Z.extend({type:Pt,validate(t){let{name:e}=t;if(!(0,_.Z)(e))return"Program name required"},urlRoot:"/api/programs",getPublished(){const t=d().request("entities","programActions:collection",this.get("_program_actions")),e=d().request("entities","programFlows:collection",this.get("_program_flows")),i=y.t0.PUBLISHED,o=d().request("entities","programActions:collection",t.filter({status:i})),s=d().request("entities","programFlows:collection",e.filter({status:i}));return new(n().Collection)([...s.models,...o.models],{comparator:"name"})}}),Ft=(0,h.Z)(bt,Pt),St=g.Z.extend({url:"/api/programs",model:Ft}),Dt=(new(o.Z.extend({Entity:{_Model:bt,Model:Ft,Collection:St},radioRequests:{"programs:model":"getModel","programs:collection":"getCollection","fetch:programs:model":"fetchModel","fetch:programs:collection":"fetchCollection","fetch:programs:model:byProgramFlow":"fetchProgramByProgramFlow"},fetchProgramByProgramFlow(t){return this.fetchBy(`/api/program-flows/${t}/program`)}})),"settings"),Bt=m.Z.extend({type:Dt,url:"/api/settings",parseModel(t){const e=t.reduce(((t,e)=>(t[e.id]=e.attributes.value,t)),{});return{id:"settings",...e}}}),Ot=(0,h.Z)(Bt,Dt),$t=g.Z.extend({url:"/api/settings",model:Ot}),It=(new(o.Z.extend({Entity:{_Model:Bt,Model:Ot,Collection:$t},radioRequests:{"settings:model":"getModel","fetch:settings:model":"fetchModel"}})),"states"),Nt=m.Z.extend({type:It,isDone(){return this.get("status")===y.lO.DONE}}),Tt=(0,h.Z)(Nt,It),kt=g.Z.extend({url:"/api/states",model:Tt}),Lt=(new(o.Z.extend({Entity:{_Model:Nt,Model:Tt,Collection:kt},radioRequests:{"states:model":"getModel","states:collection":"getCollection","fetch:states:collection":"fetchCollection"}})),"teams"),Gt=m.Z.extend({type:Lt,urlRoot:"/api/teams",hasClinicians(){const t=this.get("_clinicians");return t&&t.length}}),Wt=(0,h.Z)(Gt,Lt),jt=g.Z.extend({url:"/api/teams",model:Wt,comparator:"name"}),Ut=(new(o.Z.extend({Entity:{_Model:Gt,Model:Wt,Collection:jt},radioRequests:{"teams:model":"getModel","teams:collection":"getCollection","fetch:teams:collection":"fetchCollection"}})),"widgets"),Ht=m.Z.extend({type:Ut}),Jt=(0,h.Z)(Ht,Ut),zt=g.Z.extend({url:"/api/widgets",model:Jt,modelId:t=>(0,l.EL)(`${t.id}-`)});new(o.Z.extend({Entity:{_Model:Ht,Model:Jt,Collection:zt},radioRequests:{"widgets:model":"getModel","widgets:collection":"getCollection","fetch:widgets:collection":"fetchWidgets"},fetchWidgets(){let{filter:t={}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e={filter:t};return this.fetchCollection({data:e})}}))},1188:(t,e,i)=>{i.d(e,{Ww:()=>s,cB:()=>a,lO:()=>l,q$:()=>n,t0:()=>r,vc:()=>o});const o=[{id:"employee",name:"Employee",details:"can access Workspace only"},{id:"manager",name:"Manager",details:"can access Workspace plus Admin features"}],s={DISABLED:"disabled",PATIENT:"patient"},n={DISABLED:"disabled",PENDING:"pending",SENT:"sent",RESPONDED:"responded",CANCELED:"canceled",ERROR_NO_PHONE:"error_no_phone",ERROR_OPT_OUT:"error_opt_out",ERROR_SMS_FAILED:"error_sms_failed"},r={CONDITIONAL:"conditional",DRAFT:"draft",PUBLISHED:"published"},a=[{id:"today",unit:"day",prev:0},{id:"yesterday",unit:"day",prev:1},{id:"thisweek",unit:"week",prev:0},{id:"lastweek",unit:"week",prev:1},{id:"thismonth",unit:"month",prev:0},{id:"lastmonth",unit:"month",prev:1}],l={STARTED:"started",QUEUED:"queued",DONE:"done"}},4861:(t,e,i)=>{function o(t,e){return"desc"===t?-1*e:e}function s(t,e,i){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return e||(e=s),i||(i=s),o(t,e.localeCompare(i))}i.d(e,{XQ:()=>s}),i(7198)}}]);