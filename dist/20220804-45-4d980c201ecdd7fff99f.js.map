{"version":3,"file":"20220804-45-4d980c201ecdd7fff99f.js","mappings":"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","sources":["webpack://care-ops-frontend/./node_modules/marionette.toolkit/dist/marionette.toolkit.esm.js","webpack://care-ops-frontend/./node_modules/uuid/dist/esm-browser/rng.js","webpack://care-ops-frontend/./node_modules/uuid/dist/esm-browser/regex.js","webpack://care-ops-frontend/./node_modules/uuid/dist/esm-browser/validate.js","webpack://care-ops-frontend/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://care-ops-frontend/./node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport { MnObject, Application, View } from 'backbone.marionette';\n\nvar ClassOptions = ['StateModel', 'stateEvents'];\n/**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.MnObject or Backbone.View.\n *\n * @mixin\n */\n\nvar StateMixin = {\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState: function initState() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._initState(options);\n\n    this.delegateStateEvents();\n    return this;\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState: function _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions); // Remove event handlers from previous state\n\n    this._removeEventHandlers();\n\n    var StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents: function delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents: function undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers: function _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers: function _removeEventHandlers() {\n    if (!this._stateModel) {\n      return;\n    }\n\n    this.undelegateStateEvents();\n\n    this._stateModel.stopListening();\n\n    this.off('destroy', this._destroyState);\n  },\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel: function _getStateModel(options) {\n    if (this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if (_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Error('\"StateModel\" must be a model class or a function that returns a model class');\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState: function setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults: function resetStateDefaults() {\n    var defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState: function getState(attr) {\n    if (!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Toggle a property on the _stateModel.\n   *\n   * @public\n   * @method toggleState\n   * @param {String} attr - Attribute name of stateModel.\n   * @param {val} [value] - Attribute value.\n   * @returns {Backbone.Model} - The _stateModel or attribute value.\n   */\n  toggleState: function toggleState(attr, val) {\n    if (arguments.length > 1) {\n      return this._stateModel.set(attr, !!val);\n    }\n\n    return this._stateModel.set(attr, !this._stateModel.get(attr));\n  },\n\n  /**\n   * Check if _stateModel has a property\n   *\n   * @public\n   * @method hasState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Boolean}\n   */\n  hasState: function hasState(attr) {\n    return this._stateModel.has(attr);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState: function _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n\nvar ClassOptions$1 = ['childApps', 'childAppOptions'];\n/**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nvar ChildAppsMixin = {\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps: function _initChildApps() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._childApps = {};\n    this.mergeOptions(options, ClassOptions$1);\n    var childApps = this.childApps;\n\n    if (childApps) {\n      if (_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n  },\n\n  /**\n   * Finds `regionName` and `getOptions` for the childApp\n   *\n   * @private\n   * @method _getChildStartOpts\n   */\n  _getChildStartOpts: function _getChildStartOpts(childApp) {\n    var _this = this;\n\n    var tkOpts = childApp._tkOpts || {};\n    var opts = {\n      region: this.getRegion(tkOpts.regionName)\n    };\n\n    _.each(tkOpts.getOptions, function (opt) {\n      opts[opt] = _this.getOption(opt);\n    });\n\n    return opts;\n  },\n\n  /**\n   * Starts a `childApp`\n   *\n   * @private\n   * @method _startChildApp\n   */\n  _startChildApp: function _startChildApp(childApp, options) {\n    var opts = this._getChildStartOpts(childApp);\n\n    return childApp.start(_.extend(opts, options));\n  },\n\n  /**\n   * Handles explicit boolean values of restartWithParent\n   * restartWithParent === false does nothing\n   *\n   * @private\n   * @method _shouldStartWithRestart\n   */\n  _shouldActWithRestart: function _shouldActWithRestart(childApp, action) {\n    if (!this._isRestarting) {\n      return true;\n    }\n\n    var restartWithParent = _.result(childApp, 'restartWithParent');\n\n    if (restartWithParent === true) {\n      return true;\n    }\n\n    if (restartWithParent !== false && _.result(childApp, action)) {\n      return true;\n    }\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps: function _startChildApps() {\n    var _this2 = this;\n\n    var action = 'startWithParent';\n\n    _.each(this._childApps, function (childApp) {\n      if (!_this2._shouldActWithRestart(childApp, action)) {\n        return;\n      }\n\n      if (!_this2._isRestarting && !_.result(childApp, action)) {\n        return;\n      }\n\n      _this2._startChildApp(childApp);\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps: function _stopChildApps() {\n    var _this3 = this;\n\n    var action = 'stopWithParent';\n\n    _.each(this._childApps, function (childApp) {\n      if (!_this3._shouldActWithRestart(childApp, action)) {\n        return;\n      }\n\n      if (!_this3._isRestarting && !_.result(childApp, action)) {\n        return;\n      }\n\n      childApp.stop();\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp: function startChildApp(appName, options) {\n    var childApp = this.getChildApp(appName);\n\n    if (!childApp) {\n      throw new Error(\"A child app with the name \".concat(appName, \" does not exist.\"));\n    }\n\n    return this._startChildApp(childApp, options);\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @param {Object} options - Stop options for app\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp: function stopChildApp(appName, options) {\n    return this.getChildApp(appName).stop(options);\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps: function _destroyChildApps() {\n    _.each(this._childApps, function (childApp) {\n      if (!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject: function _buildAppFromObject(appConfig) {\n    var AppClass = appConfig.AppClass;\n\n    var options = _.omit(appConfig, 'AppClass', 'regionName', 'getOptions');\n\n    var app = this.buildApp(AppClass, options);\n    app._tkOpts = _.pick(appConfig, 'regionName', 'getOptions');\n    return app;\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp: function _buildApp(AppClass, options) {\n    if (_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n\n    if (_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp: function buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique: function _ensureAppIsUnique(appName) {\n    if (this._childApps[appName]) {\n      throw new Error(\"A child App with name \\\"\".concat(appName, \"\\\" has already been added.\"));\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps: function addChildApps(childApps) {\n    _.each(childApps, _.bind(function (childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp: function addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    var childApp = this._buildApp(AppClass, options);\n\n    if (!childApp) {\n      throw new Error('App build failed.  Incorrect configuration.');\n    }\n\n    childApp._name = appName;\n    this._childApps[appName] = childApp; // When the app is destroyed remove the cached app.\n    // Listener setup relative to the childApp's running state (using _on)\n\n    childApp._on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if (this.isRunning() && _.result(childApp, 'startWithParent')) {\n      this._startChildApp(childApp);\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName: function getName() {\n    return this._name;\n  },\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps: function getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp: function getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp: function _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps: function removeChildApps() {\n    var childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function (childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp: function removeChildApp(appName, options) {\n    options = _.extend({}, options);\n    var childApp = this.getChildApp(appName);\n\n    if (!childApp) {\n      return;\n    } // if preventDestroy simply unregister the child app\n\n\n    if (options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n\n/**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nvar EventListenersMixin = {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents: function _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function (args) {\n      this.off.apply(this, args);\n    }, this));\n\n    this._runningEvents = [];\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners: function _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function (args) {\n      this.stopListening.apply(this, args);\n    }, this));\n\n    this._runningListeningTo = [];\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on: function on() {\n    if (this._isRunning) {\n      this._runningEvents = this._runningEvents || [];\n\n      this._runningEvents.push(arguments);\n    }\n\n    return MnObject.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _on\n   * @returns {EventListeners}\n   */\n  _on: MnObject.prototype.on,\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo: function listenTo() {\n    if (this._isRunning) {\n      this._runningListeningTo = this._runningListeningTo || [];\n\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _listenTo\n   * @returns {EventListeners}\n   */\n  _listenTo: MnObject.prototype.listenTo,\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce: function listenToOnce() {\n    if (this._isRunning) {\n      this._runningListeningTo = this._runningListeningTo || [];\n\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n\nvar ViewEventsMixin = {\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default false\n   */\n  viewEventPrefix: false,\n\n  /**\n   * Constructs hashes and options for view event proxy\n   *\n   * @private\n   * @method _buildEventProxies\n   */\n  _buildEventProxies: function _buildEventProxies() {\n    var viewEvents = _.result(this, 'viewEvents') || {};\n    this._viewEvents = this.normalizeMethods(viewEvents);\n    this._viewTriggers = _.result(this, 'viewTriggers') || {};\n    this._viewEventPrefix = _.result(this, 'viewEventPrefix');\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents: function _proxyViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  /**\n   * Event handler for view proxy\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _childViewEventHandler\n   * @param {String} - event name\n   */\n  _childViewEventHandler: function _childViewEventHandler(eventName) {\n    var viewEvents = this._viewEvents;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (_.isFunction(viewEvents[eventName])) {\n      viewEvents[eventName].apply(this, args);\n    } // use the parent view's proxyEvent handlers\n\n\n    var viewTriggers = this._viewTriggers; // Call the event with the proxy name on the parent layout\n\n    if (_.isString(viewTriggers[eventName])) {\n      this.triggerMethod.apply(this, [viewTriggers[eventName]].concat(args));\n    }\n\n    var prefix = this._viewEventPrefix;\n\n    if (prefix !== false) {\n      var viewEventName = \"\".concat(prefix, \":\").concat(eventName);\n      this.triggerMethod.apply(this, [viewEventName].concat(args));\n    }\n  }\n};\n\nvar ClassOptions$2 = ['startWithParent', 'restartWithParent', 'stopWithParent', 'startAfterInitialized', 'preventDestroy', 'StateModel', 'stateEvents', 'viewEventPrefix', 'viewEvents', 'viewTriggers'];\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\n\nvar App = Application.extend({\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` is in the process of stopping then starting.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRestarting: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n  /**\n   * Set this to determine if a parent `App` should maintain the child's\n   * lifecycle during a restart.\n   *\n   * @type {Boolean|Function}\n   * @default null\n   */\n  restartWithParent: null,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.restartWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor: function constructor() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.mergeOptions(options, ClassOptions$2);\n    this.options = _.extend({}, _.result(this, 'options'), options); // ChildAppsMixin\n\n    this._initChildApps(options);\n\n    Application.call(this, options);\n\n    if (_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact: function _ensureAppIsIntact() {\n    if (this._isDestroyed) {\n      throw new Error('App has already been destroyed and cannot be used.');\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning: function isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting: function isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start: function start() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this._ensureAppIsIntact();\n\n    if (this._isRunning) {\n      return this;\n    }\n\n    if (options.region) {\n      this.setRegion(options.region);\n    }\n\n    if (options.view) {\n      this.setView(options.view);\n    } // StateMixin\n\n\n    this._initState(options); // ViewEventMixin\n\n\n    this._buildEventProxies();\n\n    this.triggerMethod('before:start', options);\n    this._isRunning = true;\n\n    this._bindRunningEvents();\n\n    this.triggerStart(options);\n    return this;\n  },\n\n  /**\n   * Sets up region, view, and state events.\n   * To only be called after `isRunning` is true\n   *\n   * @private\n   * @method _bindRunningEvents\n   * @memberOf App\n   */\n  _bindRunningEvents: function _bindRunningEvents() {\n    if (this._region) {\n      this._regionEventMonitor();\n    }\n\n    if (this._view) {\n      this._proxyViewEvents(this._view);\n    } // StateMixin\n\n\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart: function restart() {\n    var state = this.getState().attributes;\n    this._isRestarting = true;\n    this.stop().start({\n      state: state\n    });\n    this._isRestarting = false;\n    return this;\n  },\n\n  /**\n   * Starts children and triggers start event\n   * For calling within `triggerStart`\n   *\n   * @public\n   * @method finallyStart\n   * @memberOf App\n   * @event App#start - passes any arguments\n   * @returns\n   */\n  finallyStart: function finallyStart() {\n    this._startChildApps();\n\n    this.triggerMethod.apply(this, ['start'].concat(Array.prototype.slice.call(arguments)));\n  },\n\n  /**\n   * Triggers start event via finallyStart.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @returns\n   */\n  triggerStart: function triggerStart(options) {\n    this.finallyStart(options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop: function stop(options) {\n    if (!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._stopChildApps();\n\n    this._isRunning = false;\n    this.triggerMethod('stop', options); // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n\n    this._stopRunningListeners();\n\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy: function destroy() {\n    if (this._isDestroyed) {\n      return this;\n    }\n\n    this.stop();\n\n    this._removeView();\n\n    this._destroyChildApps();\n\n    Application.prototype.destroy.apply(this, arguments);\n    return this;\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion: function setRegion(region) {\n    if (this._region) {\n      this.stopListening(this._region);\n    }\n\n    this._region = region;\n\n    if (region.currentView) {\n      this.setView(region.currentView);\n    }\n\n    if (this._isRunning) {\n      this._regionEventMonitor();\n    }\n\n    return region;\n  },\n\n  /**\n   * Monitors the apps region before:show event so the region's view\n   * is available to the app\n   *\n   * @private\n   * @method _regionEventMonitor\n   * @memberOf App\n   */\n  _regionEventMonitor: function _regionEventMonitor() {\n    this.listenTo(this._region, {\n      'before:show': this._onBeforeShow,\n      'empty': this._onEmpty\n    });\n  },\n\n  /**\n   * Region monitor handler which sets the app's view to the region's view\n   *\n   * @private\n   * @method _onBeforeShow\n   * @memberOf App\n   */\n  _onBeforeShow: function _onBeforeShow(region, view) {\n    this.setView(view);\n  },\n\n  /**\n   * Region monitor handler which empties the region's view\n   *\n   * @private\n   * @method _onEmpty\n   * @memberOf App\n   */\n  _onEmpty: function _onEmpty(region, view) {\n    if (view !== this._view) {\n      return;\n    }\n\n    this._removeView();\n  },\n\n  /**\n   * Region monitor handler which deletes the region's view and listeners to view\n   *\n   * @private\n   * @method _removeView\n   * @memberOf App\n   */\n  _removeView: function _removeView() {\n    if (this._view) {\n      this.stopListening(this._view);\n      delete this._view;\n    }\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion: function getRegion(regionName) {\n    if (!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView: function setView(view) {\n    if (this._view === view) {\n      return view;\n    }\n\n    if (this._view) {\n      this.stopListening(this._view);\n    }\n\n    this._view = view; // ViewEventsMixin\n\n    if (this._isRunning) {\n      this._proxyViewEvents(view);\n    } // Internal non-running listener\n\n\n    this._listenTo(this._view, 'destroy', this._removeView);\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView: function getView() {\n    return this._view || this._region && this._region.currentView;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView: function showView() {\n    var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._view;\n    var region = this.getRegion();\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    region.show.apply(region, [view].concat(args));\n\n    if (!this.isRunning()) {\n      this.setView(region.currentView);\n    }\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView: function showChildView(regionName, view) {\n    var _this$getView;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    (_this$getView = this.getView()).showChildView.apply(_this$getView, [regionName, view].concat(args));\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView: function getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin, ViewEventsMixin);\n\nvar ClassOptions$3 = ['regionOptions', 'ViewClass', 'viewEventPrefix', 'viewEvents', 'viewTriggers', 'viewOptions'];\n/**\n * Reusable Marionette.MnObject with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\n\nvar Component = Application.extend({\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: View,\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor: function constructor() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions$3);\n    this.options = _.extend({}, _.result(this, 'options'), options); // ViewEventMixin\n\n    this._buildEventProxies(); // StateMixin\n\n\n    this._initState(options);\n\n    Application.call(this, options); // StateMixin\n\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @param {Object} [regionOptions] - Options hash mixed into the instantiated region.\n   * @returns {Component}\n   */\n  showIn: function showIn(region, viewOptions, regionOptions) {\n    this._region = region;\n    this.show(viewOptions, regionOptions);\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @param {Object} [regionOptions] - Options hash passed to the region on show.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show: function show(viewOptions, regionOptions) {\n    var region = this.getRegion();\n\n    if (!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    var view = this._getView(viewOptions);\n\n    this.stopListening(region.currentView, 'destroy', this.destroy);\n    this.triggerMethod('before:show', this, view, viewOptions, regionOptions);\n    this.showView(view, this.mixinRegionOptions(regionOptions));\n    this.listenTo(region.currentView, 'destroy', this.destroy);\n    this.triggerMethod('show', this, view, viewOptions, regionOptions);\n    return this;\n  },\n\n  /**\n   * Empty the Components region without destroying it\n   *\n   * @public\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method empty\n   * @memberOf Component\n   * @returns {Component}\n   */\n  empty: function empty() {\n    var region = this.getRegion();\n\n    if (!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    this.stopListening(region.currentView, 'destroy', this.destroy);\n    region.empty();\n    return this;\n  },\n\n  /**\n   * Mixin regionOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinRegionOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinRegionOptions: function mixinRegionOptions(options) {\n    var regionOptions = _.result(this, 'regionOptions');\n\n    return _.extend({}, regionOptions, options);\n  },\n\n  /**\n   * Get the Component view instance.\n   *\n   * @private\n   * @method _getView\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getView: function _getView(options) {\n    var ViewClass = this._getViewClass(options);\n\n    var viewOptions = this.mixinViewOptions(options);\n    var view = this.buildView(ViewClass, viewOptions); // ViewEventMixin\n\n    this._proxyViewEvents(view);\n\n    return view;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass: function _getViewClass() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ViewClass = this.ViewClass;\n\n    if (ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if (_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Error('\"ViewClass\" must be a view class or a function that returns a view class');\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinViewOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinViewOptions: function mixinViewOptions(options) {\n    var viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({\n      state: this.getState().attributes\n    }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView: function buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to Mn.Application `destroy`\n   * @memberOf Component\n   */\n  destroy: function destroy() {\n    if (this._isDestroyed) {\n      return this;\n    }\n\n    var region = this.getRegion();\n\n    if (region) {\n      region.empty();\n    }\n\n    Application.prototype.destroy.apply(this, arguments);\n    return this;\n  }\n}, {\n  /**\n   * Sets the region for a Component Class\n   *\n   * @public\n   * @method setRegion\n   * @param {Marionette.Region} - region definition for instantiated components\n   * @memberOf Component.prototype\n   */\n  setRegion: function setRegion(region) {\n    this.prototype.region = region;\n  }\n});\n\n_.extend(Component.prototype, StateMixin, ViewEventsMixin);\n\nvar version = \"6.2.0\";\n\n/**\n * @module Toolkit\n */\n\nfunction mixinState(classDefinition) {\n  var _StateMixin = StateMixin;\n\n  if (classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n}\n\nexport { App, Component, StateMixin, version as VERSION, mixinState };\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"names":["ClassOptions","StateMixin","StateModel","initState","options","arguments","length","undefined","this","_initState","delegateStateEvents","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","unbindEvents","on","_destroyState","stopListening","off","prototype","call","Error","setState","set","apply","resetStateDefaults","defaults","getState","attr","get","toggleState","val","hasState","has","ClassOptions$1","ChildAppsMixin","_initChildApps","_childApps","childApps","addChildApps","_getChildStartOpts","childApp","_this","tkOpts","_tkOpts","opts","region","getRegion","regionName","getOptions","opt","getOption","_startChildApp","start","_shouldActWithRestart","action","_isRestarting","restartWithParent","_startChildApps","_this2","_stopChildApps","_this3","stop","startChildApp","appName","getChildApp","concat","stopChildApp","_destroyChildApps","destroy","_buildAppFromObject","appConfig","AppClass","app","buildApp","_buildApp","childAppOptions","_ensureAppIsUnique","addChildApp","_name","_on","_removeChildApp","isRunning","getName","getChildApps","removeChildApps","removeChildApp","preventDestroy","EventListenersMixin","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","MnObject","listenTo","_listenTo","listenToOnce","ViewEventsMixin","viewEventPrefix","_buildEventProxies","viewEvents","_viewEvents","normalizeMethods","_viewTriggers","_viewEventPrefix","_proxyViewEvents","view","_childViewEventHandler","eventName","_len","Array","_key","viewTriggers","triggerMethod","prefix","viewEventName","ClassOptions$2","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","isRestarting","setRegion","setView","_bindRunningEvents","triggerStart","_region","_regionEventMonitor","_view","restart","attributes","finallyStart","slice","_removeView","currentView","_onBeforeShow","_onEmpty","getView","showView","show","showChildView","_this$getView","_len2","_key2","getChildView","ClassOptions$3","Component","ViewClass","View","showIn","viewOptions","regionOptions","_getView","mixinRegionOptions","empty","_getViewClass","mixinViewOptions","buildView","mixinState","classDefinition","_StateMixin","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","uuid","byteToHex","i","toString","substr","buf","offset","rnds","random","arr","toLowerCase","TypeError"],"sourceRoot":""}