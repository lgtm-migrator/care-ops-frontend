"use strict";(globalThis.webpackChunkcare_ops_frontend=globalThis.webpackChunkcare_ops_frontend||[]).push([[503],{3503:(e,t,i)=>{var o=i(4822),s=i(8088),n=i.n(s),r=i(5291),a=i.n(r),l=i(7198),c=i(7739),d=i.n(c),h=i(7027),u=i(9203),p=i.n(u),g=i(4257),m=i(3018),f=i(1267),w=i(4861),_=i(1441),y=i(1188);const v="patient-actions",{parseRelationship:Z}=f.Z,R=function(e,t){return e&&"owner"!==t?Z(e,t):e},C=m.Z.extend({urlRoot(){if(this.isNew()){const e=this.get("_flow");return e?`/api/flows/${e}/relationships/actions`:`/api/patients/${this.get("_patient")}/relationships/actions`}return"/api/actions"},type:v,validate(e){let{name:t}=e;if(!(0,_.Z)(t))return"Action name required"},hasTag(e){return(0,l.r3)(this.get("tags"),e)},getForm(){const e=this.get("_form");if(e)return d().request("entities","forms:model",e)},getFormResponses(){return d().request("entities","formResponses:collection",this.get("_form_responses"),{comparator:(e,t)=>(0,w.XQ)("desc",e.get("_created_at"),t.get("_created_at"))})},getPatient(){return d().request("entities","patients:model",this.get("_patient"))},getOwner(){const e=this.get("_owner");return d().request("entities",`${e.type}:model`,e.id)},getFlow(){if(this.get("_flow"))return d().request("entities","flows:model",this.get("_flow"))},getState(){return d().request("entities","states:model",this.get("_state"))},isDone(){return this.getState().isDone()},isOverdue(){if(this.isDone())return!1;const e=this.get("due_date"),t=this.get("due_time");if(!t)return p()(e).isBefore(p()(),"day");const i=p()(`${e} ${t}`);return i.isBefore(p()(),"day")||i.isBefore(p()(),"minute")},isAdHoc(){return!this.get("_program_action")&&!this.get("_flow")},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveDueDate(e){return e?this.save({due_date:e.format("YYYY-MM-DD")}):this.save({due_date:null,due_time:null})},saveDueTime(e){return e?this.save({due_time:e}):this.save({due_time:null})},saveState(e){const t={_state:e.id},i=this.get("sharing");return e.isDone()&&![y.q$.DISABLED,y.q$.RESPONDED].includes(i)&&(t.sharing=y.q$.CANCELED),this.save(t,{relationships:{state:this.toRelation(e)}})},saveOwner(e){return this.save({_owner:e},{relationships:{owner:this.toRelation(e)}})},saveAll(e){this.isNew()&&(e=(0,l.l7)({},this.attributes,e));const t={flow:this.toRelation(e._flow,"flows"),form:this.toRelation(e._form,"forms"),owner:this.toRelation(e._owner),state:this.toRelation(e._state,"states"),"program-action":this.toRelation(e._program_action,"program-actions")};return this.save(e,{relationships:t},{wait:!0})},parseRelationship:R}),q=(0,h.Z)(C,v),M=g.Z.extend({url:"/api/actions",model:q,parseRelationship:R,save(e){const t=this.invoke("saveAll",e);return a().when(...t)},getPatients(){return d().request("entities","patients:collection",this.invoke("getPatient"))},groupByDate(){const e=this.groupBy("due_date");return(0,l.u4)((0,l.XP)(e),((t,i)=>(t.add({date:i,actions:new M(e[i])}),t)),new(n().Collection)([]))}});new(o.Z.extend({Entity:{_Model:C,Model:q,Collection:M},radioRequests:{"actions:model":"getModel","actions:collection":"getCollection","fetch:actions:model":"fetchAction","fetch:actions:collection":"fetchActions","fetch:actions:collection:byPatient":"fetchActionsByPatient","fetch:actions:collection:byFlow":"fetchActionsByFlow"},fetchAction(e){const t=["program-action.program","flow.program-flow.program"].join();return this.fetchModel(e,{data:{include:t}})},fetchActions(e){let{filter:t}=e;const i={filter:t};return this.fetchCollection({data:i})},fetchActionsByPatient(e){let{patientId:t,filter:i}=e;const o={filter:i},s=`/api/patients/${t}/relationships/actions`;return this.fetchCollection({url:s,data:o})},fetchActionsByFlow(e){const t=`/api/flows/${e}/relationships/actions`;return this.fetchCollection({url:t})}}));var x=i(7948),A=i(7201);const b="clinicians",E=m.Z.extend({type:b,urlRoot:"/api/clinicians",preinitialize(){this.on("change:_team",this.onChangeTeam)},validate:e=>(0,_.Z)(e.name)?(0,_.Z)(e.email)?void 0:"A clinician email address is required":"A clinician name is required",onChangeTeam(){const e=d().request("entities","teams:model",this.previous("_team"));e.set("_clinicians",(0,l.d1)(e.get("_clinicians"),{id:this.id}));const t=d().request("entities","teams:model",this.get("_team"));t.set("_clinicians",(0,l.G0)(t.get("_clinicians"),[{id:this.id}]))},getGroups(){return d().request("entities","groups:collection",this.get("_groups"))},getTeam(){return this.hasTeam()?d().request("entities","teams:model",this.get("_team")):d().request("entities","teams:model",{name:A.ZP.patients.sidebar.action.activityViews.systemTeam})},hasTeam(){const e=this.get("_team");return e&&e!==x.Z},can(e){return this.get("permissions").includes(e)},saveTeam(e){const t=`/api/clinicians/${this.id}/relationships/team`;this.set({_team:e.id}),this.sync("update",this,{url:t,data:JSON.stringify(this.toRelation(e))})},getInitials(){const e=String(this.get("name")).split(" ");return 1===e.length?(0,l.Ps)(e).charAt(0):`${(0,l.Ps)(e).charAt(0)}${(0,l.Z$)(e).charAt(0)}`},isEditable(){return!this.get("last_active_at")},isActive(){const e=this.hasTeam(),t=!!(0,l.dp)(this.get("_groups")),i=this.get("last_active_at");return e&&t&&i}}),P=(0,h.Z)(E,b),F=g.Z.extend({url:"/api/clinicians",model:P,comparator:"name"}),S=(new(o.Z.extend({Entity:{_Model:E,Model:P,Collection:F},radioRequests:{"clinicians:model":"getModel","clinicians:collection":"getCollection","fetch:clinicians:collection":"fetchCollection","fetch:clinicians:current":"fetchCurrentClinician","fetch:clinicians:model":"fetchModel"},fetchCurrentClinician(){return this.fetchBy("/api/clinicians/me")}})),"comments"),D=m.Z.extend({type:S,urlRoot(){return this.isNew()?`/api/actions/${this.get("_action")}/relationships/comments`:"/api/comments"},validate(e){let{message:t}=e;if(!(0,_.Z)(t))return"Comment message required."},getClinician(){return d().request("entities","clinicians:model",this.get("_clinician"))}}),B=(0,h.Z)(D,S),$=g.Z.extend({model:B}),O=(new(o.Z.extend({Entity:{_Model:D,Model:B,Collection:$},radioRequests:{"comments:model":"getModel","fetch:comments:collection:byAction":"fetchCommentsByAction"},fetchCommentsByAction(e){const t=`/api/actions/${e}/relationships/comments`;return this.fetchCollection({url:t})}})),"dashboards"),I=m.Z.extend({type:O,urlRoot:"/api/dashboards"}),N=(0,h.Z)(I,O),T=g.Z.extend({url:"/api/dashboards",model:N}),L=(new(o.Z.extend({Entity:{_Model:I,Model:N,Collection:T},radioRequests:{"dashboards:model":"getModel","dashboards:collection":"getCollection","fetch:dashboards:model":"fetchModel","fetch:dashboards:collection":"fetchCollection"}})),m.Z.extend({type:"directories",url(){return`/api/directory/${this.get("slug")}`}})),k=g.Z.extend({url:"/api/directories",model:L}),G=(new(o.Z.extend({Entity:{Model:L,Collection:k},radioRequests:{"fetch:directories:model":"fetchDirectory","fetch:directories:filterable":"fetchFilterable"},fetchDirectory:(e,t)=>new L({slug:e}).fetch({data:t}),fetchFilterable(){return this.fetchCollection({data:{filterable:!0}})}})),"events"),U=m.Z.extend({type:G,getClinician(){return d().request("entities","clinicians:model",this.get("_clinician"))},getRecipient(){if(this.get("_recipient"))return d().request("entities","patients:model",this.get("_recipient"))},getEditor(){return this.get("_editor")?d().request("entities","clinicians:model",this.get("_editor")):d().request("entities","clinicians:model",{name:"RoundingWell"})},getTeam(){return d().request("entities","teams:model",this.get("_team"))},getState(){return d().request("entities","states:model",this.get("_state"))},getProgram(){if(this.get("_program"))return d().request("entities","programs:model",this.get("_program"))},getForm(){if(this.get("_form"))return d().request("entities","forms:model",this.get("_form"))}}),j=(0,h.Z)(U,G),H=g.Z.extend({model:j}),W=(new(o.Z.extend({Entity:{_Model:U,Model:j,Collection:H},radioRequests:{"events:model":"getModel","events:collection":"getCollection","fetch:actionEvents:collection":"fetchActionEvents","fetch:flowEvents:collection":"fetchFlowEvents"},fetchActionEvents(e){return this.fetchCollection({url:`/api/actions/${e}/activity`})},fetchFlowEvents(e){return this.fetchCollection({url:`/api/flows/${e}/activity`})}})),"flows"),{parseRelationship:J}=f.Z,z=function(e,t){return e&&"owner"!==t?J(e,t):e},Y=m.Z.extend({urlRoot(){return this.isNew()?`/api/patients/${this.get("_patient")}/relationships/flows`:"/api/flows"},type:W,getPatient(){return d().request("entities","patients:model",this.get("_patient"))},getOwner(){const e=this.get("_owner");return d().request("entities",`${e.type}:model`,e.id)},getState(){return d().request("entities","states:model",this.get("_state"))},getProgramFlow(){return d().request("entities","programFlows:model",this.get("_program_flow"))},isDone(){return this.getState().isDone()},isAllDone(){const{complete:e,total:t}=this.get("_progress");return e===t},saveState(e){return this.save({_state:e.id},{relationships:{state:this.toRelation(e)}})},saveOwner(e){return this.save({_owner:e},{relationships:{owner:this.toRelation(e)}})},applyOwner(e){const t=`${this.url()}/relationships/actions`,i={owner:this.toRelation(e)};return a().ajax({method:"PATCH",url:t,data:JSON.stringify({data:{relationships:i}})})},saveAll(e){this.isNew()&&(e=(0,l.l7)({},this.attributes,e));const t={state:this.toRelation(e._state,"states"),owner:this.toRelation(e._owner),"program-flow":this.toRelation(e._program_flow,"program-flows")};return this.save(e,{relationships:t},{wait:!0})},parseRelationship:z}),Q=(0,h.Z)(Y,W),V=g.Z.extend({url:"/api/flows",model:Q,parseRelationship:z,save(e){const t=this.invoke("saveAll",e);return a().when(...t)},applyOwner(e){const t=this.invoke("applyOwner",e);return a().when(...t)},getPatients(){return d().request("entities","patients:collection",this.invoke("getPatient"))}});new(o.Z.extend({Entity:{_Model:Y,Model:Q,Collection:V},radioRequests:{"flows:model":"getModel","flows:collection":"getCollection","fetch:flows:model":"fetchFlow","fetch:flows:collection":"fetchFlows","fetch:flows:collection:byPatient":"fetchFlowsByPatient"},fetchFlow(e){const t=["program-flow","program-flow.program","program-flow.program-actions"].join();return this.fetchModel(e,{data:{include:t}})},fetchFlows(e){let{filter:t}=e;const i={filter:t};return this.fetchCollection({data:i})},fetchFlowsByPatient(e){let{patientId:t,filter:i}=e;const o={filter:i},s=`/api/patients/${t}/relationships/flows`;return this.fetchCollection({url:s,data:o})}})),i(8380);const X="form-responses",K=m.Z.extend({type:X,urlRoot:"/api/form-responses",saveAll(){const e=this.attributes,t={form:this.toRelation(e._form,"forms"),patient:this.toRelation(e._patient,"patients"),action:this.toRelation(e._action,"patient-actions")};return this.save(e,{relationships:t},{wait:!0})}}),ee=(0,h.Z)(K,X),te=g.Z.extend({url:"/api/form-responses",model:ee}),ie=(new(o.Z.extend({Entity:{_Model:K,Model:ee,Collection:te},radioRequests:{"formResponses:model":"getModel","formResponses:collection":"getCollection","fetch:formResponses:submission":"fetchSubmission","fetch:formResponses:latestSubmission":"fetchLatestSubmission"},fetchSubmission:e=>e?a().ajax(`/api/form-responses/${e}/response`):[{}],fetchLatestSubmission:(e,t)=>a().ajax(`/api/patients/${e}/form-responses/latest?filter[form]=${t}`)})),"groups"),oe=m.Z.extend({type:ie,urlRoot:"/api/groups",getActiveClinicians(){const e=d().request("entities","clinicians:collection",this.get("_clinicians")),t=e.filter((e=>e.isActive()&&e.get("enabled")));return e.reset(t),e},addClinician(e){const t=`/api/groups/${this.id}/relationships/clinicians`,i=e.get("_groups")||[];return e.set({_groups:(0,l.G0)(i,[{id:this.id}])}),this.set({_clinicians:(0,l.G0)(this.get("_clinicians"),[{id:e.id}])}),this.sync("create",this,{url:t,data:JSON.stringify({data:[{id:e.id,type:e.type}]})})},removeClinician(e){const t=`/api/groups/${this.id}/relationships/clinicians`;return e.set({_groups:(0,l.d1)(e.get("_groups"),{id:this.id})}),this.set({_clinicians:(0,l.d1)(this.get("_clinicians"),{id:e.id})}),this.sync("delete",this,{url:t,data:JSON.stringify({data:[{id:e.id,type:e.type}]})})}}),se=(0,h.Z)(oe,ie),ne=g.Z.extend({url:"/api/groups",model:se}),re=(new(o.Z.extend({Entity:{_Model:oe,Model:se,Collection:ne},radioRequests:{"groups:model":"getModel","groups:collection":"getCollection","fetch:groups:collection":"fetchCollection"}})),"organizations"),ae=m.Z.extend({getStates(){return this.get("states").clone()},getActiveTeams(){const e=this.getTeams();return e.reset(e.filter((e=>e.hasClinicians()))),e},getTeams(){return this.get("teams").clone()},getForms(){return this.get("forms").clone()},getSetting(e){return this.get("settings").get(e)},type:re}),le=(0,h.Z)(ae,re),ce=(new(o.Z.extend({Entity:{_Model:ae,Model:le},radioRequests:{"organizations:model":"getModel"}})),"patient-fields"),de=m.Z.extend({type:ce,getValue(){const e=this.get("value");return(0,l.Kn)(e)&&(0,l.xb)(e)?null:e}}),he=(0,h.Z)(de,ce),ue=g.Z.extend({model:he}),pe=(new(o.Z.extend({Entity:{_Model:de,Model:he,Collection:ue},radioRequests:{"patientFields:model":"getModel","patientFields:collection":"getCollection","fetch:patientFields:model":"fetchPatientField"},fetchPatientField(e,t){const i=`/api/patients/${e}/fields/${t}`;return this.fetchModel(t,{url:i,abort:!1}).then((e=>{this.getModel(e.attributes)}))}})),"patients"),ge=m.Z.extend({type:pe,urlRoot:"/api/patients",validate(e){let{first_name:t,last_name:i,birth_date:o,sex:s,_groups:n}=e;const r={};if(t&&i||(r.name="required"),s||(r.sex="required"),n&&n.length||(r.groups="required"),o?p()(o).isAfter()&&(r.birth_date="invalidDate"):r.birth_date="required",!(0,l.xb)(r))return r},getGroups(){return d().request("entities","groups:collection",this.get("_groups"))},getFields(){return d().request("entities","patientFields:collection",this.get("_patient_fields"))},addGroup(e){const t=this.getGroups();t.add(e),this.set("_groups",t.map((e=>e.pick("id"))))},removeGroup(e){const t=this.getGroups();t.remove(e),this.set("_groups",t.map((e=>e.pick("id"))))},saveAll(e){e=(0,l.l7)({},this.attributes,e);const t={groups:this.toRelation(e._groups,"groups")};return this.save(e,{relationships:t},{wait:!0})},canEdit(){return this.isNew()||"manual"===this.get("source")},getSortName(){return(this.get("last_name")+this.get("first_name")).toLowerCase()}}),me=(0,h.Z)(ge,pe),fe=g.Z.extend({url:"/api/patients",model:me,getSharedGroups(){const e=(0,l.jg)(this.invoke("getGroups"),"models");return d().request("entities","groups:collection",(0,l.jV)(...e))}}),we=(new(o.Z.extend({Entity:{_Model:ge,Model:me,Collection:fe},radioRequests:{"patients:model":"getModel","patients:collection":"getCollection","fetch:patients:model":"fetchModel","fetch:patients:model:byAction":"fetchPatientByAction","fetch:patients:model:byFlow":"fetchPatientByFlow"},fetchPatientByAction(e){return this.fetchBy(`/api/actions/${e}/patient`)},fetchPatientByFlow(e){return this.fetchBy(`/api/flows/${e}/patient`)}})),m.Z.extend({type:"patients-search-results"})),_e=g.Z.extend({url:"/api/patients",model:we,initialize(){this._debouncedSearch=(0,l.Ds)(this._debouncedSearch,150)},prevSearch:"",_xhr:{abort:l.ZT},search(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(e.length<3)return e.length&&this.prevSearch.includes(e)||(delete this._hasIdentifiers,this.reset(),this.prevSearch=""),this._debouncedSearch.cancel(),void this._xhr.abort();this.prevSearch=e,this.isSearching=!0,this._debouncedSearch(e)},hasIdentifiers(){return(0,l.jn)(this._hasIdentifiers)||(this._hasIdentifiers=!!this.find((e=>(0,l.U2)(e.get("identifiers"),"length")))),this._hasIdentifiers},_debouncedSearch(e){const t={search:e};delete this._hasIdentifiers,this._xhr=this.fetch({data:{filter:t}}),this._xhr.then((()=>{this.isSearching=!1,this.trigger("search",this)}))}}),ye=(new(o.Z.extend({Entity:{Model:we,Collection:_e},radioRequests:{"searchPatients:collection":"getCollection"}})),"program-actions"),{parseRelationship:ve}=f.Z,Ze=function(e,t){return e&&"owner"!==t?ve(e,t):e},Re=m.Z.extend({urlRoot:"/api/program-actions",type:ye,validate(e){let{name:t}=e;if(!(0,_.Z)(t))return"Action name required"},getAction(e){let{patientId:t,flowId:i}=e;const o=d().request("bootstrap","currentUser"),s=d().request("bootstrap","currentOrg").getStates();return d().request("entities","actions:model",{name:this.get("name"),_flow:i,_patient:t,_state:s.at(0).id,_owner:this.get("_owner")||{id:o.id,type:"clinicians"},_program_action:this.id})},getOwner(){const e=this.get("_owner");if(e)return d().request("entities","teams:model",e.id)},saveOwner(e){return e=this.toRelation(e),this.save({_owner:e.data},{relationships:{owner:e}})},getForm(){const e=this.get("_form");if(e)return d().request("entities","forms:model",e)},hasOutreach(){return this.get("outreach")!==y.Ww.DISABLED},saveForm(e){const t={_form:(e=this.toRelation(e)).data};return e.data||(t.outreach=y.Ww.DISABLED),this.save(t,{relationships:{form:e}})},saveAll(e){e=(0,l.l7)({},this.attributes,e);const t={owner:this.toRelation(e._owner,"teams"),form:this.toRelation(e._form,"forms"),"program-flow":this.toRelation(e._program_flow,"program-flows"),program:this.toRelation(e._program,"programs")};return this.save(e,{relationships:t},{wait:!0})},parseRelationship:Ze}),Ce=(0,h.Z)(Re,ye),qe=g.Z.extend({initialize(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.flowId=t.flowId,this.flowId&&(this.comparator="sequence")},url(){return this.flowId?`/api/program-flows/${this.flowId}/actions`:"/api/program-actions"},model:Ce,parseRelationship:Ze,updateSequences(){const e=this.map(((e,t)=>(e.set({sequence:t}),e.toJSONApi({sequence:t}))));return this.sync("patch",this,{url:this.url(),data:JSON.stringify({data:e})})}}),Me=(new(o.Z.extend({Entity:{_Model:Re,Model:Ce,Collection:qe},radioRequests:{"programActions:model":"getModel","programActions:collection":"getCollection","fetch:programActions:model":"fetchModel","fetch:programActions:collection:byProgram":"fetchProgramActionsByProgram","fetch:programActions:collection":"fetchProgramActions","fetch:programActions:collection:byProgramFlow":"fetchProgramActionsByFlow"},fetchProgramActionsByProgram(e){let{programId:t}=e;const i=`/api/programs/${t}/relationships/actions`;return this.fetchCollection({url:i})},fetchProgramActions(){let{filter:e={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={filter:e};return this.fetchCollection({data:t})},fetchProgramActionsByFlow:(e,t)=>new qe([],{flowId:e}).fetch(t)})),"program-flows"),{parseRelationship:xe}=f.Z,Ae=function(e,t){return e&&"owner"!==t?xe(e,t):e},be=m.Z.extend({urlRoot(){return this.isNew()?`/api/programs/${this.get("_program")}/relationships/flows`:"/api/program-flows"},type:Me,validate(e){let{name:t}=e;if(!(0,_.Z)(t))return"Flow name required"},getOwner(){const e=this.get("_owner");if(e)return d().request("entities","teams:model",e.id)},getFlow(e){const t=d().request("bootstrap","currentOrg").getStates();return d().request("entities","flows:model",{_patient:e,_program_flow:this.get("id"),_state:t.at(0).id})},saveOwner(e){return e=this.toRelation(e),this.save({_owner:e.data},{relationships:{owner:e}})},saveAll(e){e=(0,l.l7)({},this.attributes,e);const t={owner:this.toRelation(e._owner,"teams")};return this.save(e,{relationships:t},{wait:!0})},getActions(){return d().request("entities","programActions:collection",this.get("_program_actions"),{flowId:this.id})},parseRelationship:Ae}),Ee=(0,h.Z)(be,Me),Pe=g.Z.extend({url:"/api/program-flows",model:Ee,parseRelationship:Ae}),Fe=(new(o.Z.extend({Entity:{_Model:be,Model:Ee,Collection:Pe},radioRequests:{"programFlows:model":"getModel","programFlows:collection":"getCollection","fetch:programFlows:model":"fetchModel","fetch:programFlows:collection:byProgram":"fetchProgramFlowsByProgram","fetch:programFlows:collection":"fetchProgramFlows"},fetchProgramFlowsByProgram(e){let{programId:t}=e;const i=`/api/programs/${t}/relationships/flows`;return this.fetchCollection({url:i})},fetchProgramFlows(){let{filter:e={status:y.t0.PUBLISHED}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={filter:e};return this.fetchCollection({data:t})}})),"programs"),Se=m.Z.extend({type:Fe,validate(e){let{name:t}=e;if(!(0,_.Z)(t))return"Program name required"},urlRoot:"/api/programs",getPublished(){const e=d().request("entities","programActions:collection",this.get("_program_actions")),t=d().request("entities","programFlows:collection",this.get("_program_flows")),i=y.t0.PUBLISHED,o=d().request("entities","programActions:collection",e.filter({status:i})),s=d().request("entities","programFlows:collection",t.filter({status:i}));return new(n().Collection)([...s.models,...o.models],{comparator:"name"})}}),De=(0,h.Z)(Se,Fe),Be=g.Z.extend({url:"/api/programs",model:De}),$e=(new(o.Z.extend({Entity:{_Model:Se,Model:De,Collection:Be},radioRequests:{"programs:model":"getModel","programs:collection":"getCollection","fetch:programs:model":"fetchModel","fetch:programs:collection":"fetchCollection","fetch:programs:model:byProgramFlow":"fetchProgramByProgramFlow"},fetchProgramByProgramFlow(e){return this.fetchBy(`/api/program-flows/${e}/program`)}})),"roles"),Oe=m.Z.extend({type:$e,urlRoot:"/api/roles"}),Ie=(0,h.Z)(Oe,$e),Ne=g.Z.extend({url:"/api/roles",model:Ie}),Te=(new(o.Z.extend({Entity:{_Model:Oe,Model:Ie,Collection:Ne},radioRequests:{"roles:model":"getModel","roles:collection":"getCollection","fetch:roles:collection":"fetchCollection"}})),"settings"),Le=m.Z.extend({type:Te,url:"/api/settings",parseModel(e){const t=e.reduce(((e,t)=>(e[t.id]=t.attributes.value,e)),{});return{id:"settings",...t}}}),ke=(0,h.Z)(Le,Te),Ge=g.Z.extend({url:"/api/settings",model:ke}),Ue=(new(o.Z.extend({Entity:{_Model:Le,Model:ke,Collection:Ge},radioRequests:{"settings:model":"getModel","fetch:settings:model":"fetchModel"}})),"states"),je=m.Z.extend({type:Ue,isDone(){return this.get("status")===y.lO.DONE}}),He=(0,h.Z)(je,Ue),We=g.Z.extend({url:"/api/states",model:He}),Je=(new(o.Z.extend({Entity:{_Model:je,Model:He,Collection:We},radioRequests:{"states:model":"getModel","states:collection":"getCollection","fetch:states:collection":"fetchCollection"}})),"teams"),ze=m.Z.extend({type:Je,urlRoot:"/api/teams",hasClinicians(){const e=this.get("_clinicians");return e&&e.length}}),Ye=(0,h.Z)(ze,Je),Qe=g.Z.extend({url:"/api/teams",model:Ye,comparator:"name"}),Ve=(new(o.Z.extend({Entity:{_Model:ze,Model:Ye,Collection:Qe},radioRequests:{"teams:model":"getModel","teams:collection":"getCollection","fetch:teams:collection":"fetchCollection"}})),"widgets"),Xe=m.Z.extend({type:Ve}),Ke=(0,h.Z)(Xe,Ve),et=g.Z.extend({url:"/api/widgets",model:Ke,modelId:e=>(0,l.EL)(`${e.id}-`)});new(o.Z.extend({Entity:{_Model:Xe,Model:Ke,Collection:et},radioRequests:{"widgets:model":"getModel","widgets:collection":"getCollection","fetch:widgets:collection":"fetchWidgets"},fetchWidgets(){let{filter:e={}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={filter:e};return this.fetchCollection({data:t})}}))},1188:(e,t,i)=>{i.d(t,{Ww:()=>o,cB:()=>r,lO:()=>a,q$:()=>s,t0:()=>n});const o={DISABLED:"disabled",PATIENT:"patient"},s={DISABLED:"disabled",PENDING:"pending",SENT:"sent",RESPONDED:"responded",CANCELED:"canceled",ERROR_NO_PHONE:"error_no_phone",ERROR_OPT_OUT:"error_opt_out",ERROR_SMS_FAILED:"error_sms_failed"},n={CONDITIONAL:"conditional",DRAFT:"draft",PUBLISHED:"published"},r=[{id:"today",unit:"day",prev:0},{id:"yesterday",unit:"day",prev:1},{id:"thisweek",unit:"week",prev:0},{id:"lastweek",unit:"week",prev:1},{id:"thismonth",unit:"month",prev:0},{id:"lastmonth",unit:"month",prev:1}],a={STARTED:"started",QUEUED:"queued",DONE:"done"}},4861:(e,t,i)=>{function o(e,t){return"desc"===e?-1*t:t}function s(e,t,i){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return t||(t=s),i||(i=s),o(e,t.localeCompare(i))}i.d(t,{XQ:()=>s}),i(7198)}}]);